AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS Resource Audit Automation - Weekly scheduled audit with S3 report storage and email notifications'

Parameters:
  S3BucketName:
    Type: String
    Description: Name of the existing S3 bucket to store reports
  
  S3BucketPrefix:
    Type: String
    Default: reports/
    Description: Prefix (folder path) within the S3 bucket to store reports
  
  EmailAddress:
    Type: String
    Description: Email address to send audit reports to
  
  ScheduleExpression:
    Type: String
    Default: rate(7 days)
    Description: Schedule expression for how often to run the audit (default is weekly)
  
  AWSRegions:
    Type: CommaDelimitedList
    Default: us-east-1
    Description: Comma-separated list of AWS regions to audit

Resources:
  # IAM Role for the Lambda function
  AWSAuditLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/ReadOnlyAccess
      Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - !Sub arn:aws:s3:::${S3BucketName}
                  - !Sub arn:aws:s3:::${S3BucketName}/*
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Ref AWSAuditSNSTopic

  # SNS Topic for email notifications
  AWSAuditSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: AWS Audit Report Notifications
      TopicName: aws-audit-notifications

  # SNS Subscription for the email address
  AWSAuditSNSSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: email
      Endpoint: !Ref EmailAddress
      TopicArn: !Ref AWSAuditSNSTopic

  # Lambda function that runs the audit
  AWSAuditLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: aws-resource-audit
      Description: Weekly AWS resource audit to identify cost optimization opportunities
      Handler: lambda_function.lambda_handler
      Role: !GetAtt AWSAuditLambdaRole.Arn
      Runtime: python3.9
      Timeout: 300
      MemorySize: 512
      Environment:
        Variables:
          S3_BUCKET_NAME: !Ref S3BucketName
          S3_BUCKET_PREFIX: !Ref S3BucketPrefix
          SNS_TOPIC_ARN: !Ref AWSAuditSNSTopic
          AWS_REGIONS: !Join [',', !Ref AWSRegions]
      Code: 
        ZipFile: |
          import json
          def lambda_handler(event, context):
              return {
                  'statusCode': 200,
                  'body': json.dumps('Upload your actual Lambda code using deploy_lambda.sh')
              }

  # CloudWatch Event Rule for scheduling the audit
  AWSAuditScheduleRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Scheduled execution of AWS resource audit
      ScheduleExpression: !Ref ScheduleExpression
      State: ENABLED
      Targets:
        - Arn: !GetAtt AWSAuditLambdaFunction.Arn
          Id: TargetFunction

  # Permission for CloudWatch Events to invoke the Lambda function
  AWSAuditSchedulePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref AWSAuditLambdaFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt AWSAuditScheduleRule.Arn

Outputs:
  LambdaFunctionArn:
    Description: The ARN of the Lambda function
    Value: !GetAtt AWSAuditLambdaFunction.Arn
  
  SNSTopicArn:
    Description: The ARN of the SNS topic
    Value: !Ref AWSAuditSNSTopic
  
  ScheduleRuleArn:
    Description: The ARN of the CloudWatch Events rule
    Value: !GetAtt AWSAuditScheduleRule.Arn
                  regions = os.environ.get('AWS_REGIONS', 'us-east-1').split(',')
                  
                  # Generate HTML report
                  generate_html_report(report_path, regions)
                  
                  # Upload report to S3
                  s3_key = f"{bucket_prefix.rstrip('/')}/{report_name}"
                  print(f"Uploading report to S3 bucket {bucket_name}, key: {s3_key}")
                  
                  with open(report_path, 'rb') as f:
                      s3.put_object(
                          Bucket=bucket_name,
                          Key=s3_key,
                          Body=f.read(),
                          ContentType='text/html'
                      )
                  
                  # Generate a pre-signed URL (valid for 7 days)
                  s3_url = s3.generate_presigned_url(
                      'get_object',
                      Params={'Bucket': bucket_name, 'Key': s3_key},
                      ExpiresIn=604800  # 7 days in seconds
                  )
                  
                  # Send email notification with the S3 link
                  message = f"""
                  AWS Resource Audit Report - {timestamp}
                  
                  Your weekly AWS resource audit has been completed. The report is available at:
                  {s3_url}
                  
                  This link will expire in 7 days.
                  """
                  
                  print(f"Publishing notification to SNS topic: {sns_topic_arn}")
                  sns.publish(
                      TopicArn=sns_topic_arn,
                      Subject=f"AWS Audit Report - {timestamp}",
                      Message=message
                  )
                  
                  return {
                      'statusCode': 200,
                      'body': 'AWS audit completed successfully',
                      'reportUrl': s3_url
                  }
                  
              except Exception as e:
                  print(f"Error: {str(e)}")
                  # Send failure notification
                  if 'sns' in locals() and 'sns_topic_arn' in locals():
                      sns.publish(
                          TopicArn=sns_topic_arn,
                          Subject=f"AWS Audit Report FAILED - {timestamp if 'timestamp' in locals() else datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}",
                          Message=f"The AWS resource audit job failed with error: {str(e)}"
                      )
                  return {
                      'statusCode': 500,
                      'body': f'Error: {str(e)}'
                  }
          
          def generate_html_report(report_path, regions):
              """Generate the HTML report by running the audit checks for each region"""
              print(f"Generating HTML report at: {report_path}")
              with open(report_path, 'w') as f:
                  # Write HTML header and styles
                  f.write("""<!DOCTYPE html>
          <html lang='en'>
          <head>
            <meta charset='UTF-8'>
            <title>AWS Audit Report</title>
            <style>
              header {
                  background: #2f80ed;
                  color: white;
                  padding: 40px 20px;
                  text-align: center;
                  box-shadow: 0 4px 6px rgba(0,0,0,0.1);
              }
              header h1 {
                  margin: 0;
                  font-size: 36px;
              }
              .container {
                  max-width: 960px;
                  margin: 30px auto;
                  padding: 0 20px;
              }
              .info {
                  background: #ffffff;
                  padding: 20px;
                  border-radius: 10px;
                  margin-bottom: 30px;
                  box-shadow: 0 3px 10px rgba(0,0,0,0.05);
              }
              .section {
                  background: #ffffff;
                  border-left: 6px solid #2f80ed;
                  border-radius: 10px;
                  padding: 20px;
                  margin: 20px 0;
                  box-shadow: 0 3px 10px rgba(0,0,0,0.06);
              }
              pre {
                  background: #f9fafc;
                  padding: 15px;
                  border-radius: 6px;
                  overflow-x: auto;
                  font-size: 14px;
                  line-height: 1.5;
                  border: 1px solid #e0e6ed;
              }
              .status-ok { color: #27ae60; font-weight: bold; }
              .status-warn { color: #e67e22; font-weight: bold; }
              .status-fail { color: #c0392b; font-weight: bold; }
            </style>
          </head>
          <body>""")
          
                  # Add header and account info
                  current_time = datetime.datetime.now().strftime('%d-%b-%Y %H:%M:%S')
                  f.write(f"<header><h1>📊 AWS Cost Audit Report</h1></header>")
                  f.write(f"<div class='container'>")
                  f.write(f"<div class='info'><p><strong>Date:</strong> {current_time}</p>")
                  
                  # Get account ID
                  sts = boto3.client('sts')
                  try:
                      account_id = sts.get_caller_identity()["Account"]
                      f.write(f"<p><strong>AWS Account ID:</strong> {account_id}</p></div>")
                  except:
                      f.write("<p><strong>AWS Account ID:</strong> Unknown</p></div>")
          
                  # Process each region
                  for region in regions:
                      print(f"Processing region: {region}")
                      f.write(f"<div class='section'>")
                      f.write(f"<h2>🌍 Region: {region}</h2>")
                      
                      # Here we'd run various checks for each region
                      # For this simplified version, we'll just add some placeholder text
                      f.write("<p>Scan results would appear here. Implement your AWS audit checks.</p>")
                      
                      f.write(f"<h3 class='status-ok'>✅ AWS Audit Completed for region: {region}</h3>")
                      f.write("</div>")
          
                  # End HTML document
                  f.write("<h2 class='status-ok'>✅ AWS Audit Completed</h2>")
                  f.write("</div></body></html>")

  # CloudWatch Event Rule for scheduling the audit
  AWSAuditScheduleRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Scheduled execution of AWS resource audit
      ScheduleExpression: !Ref ScheduleExpression
      State: ENABLED
      Targets:
        - Arn: !GetAtt AWSAuditLambdaFunction.Arn
          Id: TargetFunction

  # Permission for CloudWatch Events to invoke the Lambda function
  AWSAuditSchedulePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref AWSAuditLambdaFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt AWSAuditScheduleRule.Arn

Outputs:
  LambdaFunctionArn:
    Description: The ARN of the Lambda function
    Value: !GetAtt AWSAuditLambdaFunction.Arn
  
  SNSTopicArn:
    Description: The ARN of the SNS topic
    Value: !Ref AWSAuditSNSTopic
  
  ScheduleRuleArn:
    Description: The ARN of the CloudWatch Events rule
    Value: !GetAtt AWSAuditScheduleRule.Arn
