AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template to detect and report idle AWS resources'

Parameters:
  AWSRegion:
    Type: String
    Default: us-east-1
    Description: The AWS region to scan for idle resources
    AllowedValues:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - ca-central-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - ap-southeast-1
      - ap-southeast-2
      - ap-northeast-1
      - ap-northeast-2
      - ap-south-1
      - sa-east-1

Resources:
  # S3 Bucket for storing CSV reports
  IdleResourcesReportBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'idle-resources-reports-${AWS::AccountId}'
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldReports
            Status: Enabled
            ExpirationInDays: 90

  # IAM Role for Lambda function
  IdleResourcesLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: IdleResourcesPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeInstances
                  - ec2:DescribeVolumes
                  - ec2:DescribeSnapshots
                  - ec2:DescribeImages
                  - ec2:DescribeSecurityGroups
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DescribeAddresses
                  - elasticloadbalancing:DescribeLoadBalancers
                  - elasticloadbalancing:DescribeTargetGroups
                  - elasticloadbalancing:DescribeTargetHealth
                  - lambda:ListFunctions
                  - lambda:GetFunction
                  - lambda:GetFunctionConfiguration
                  - iam:ListRoles
                  - iam:ListAttachedRolePolicies
                  - cloudwatch:GetMetricStatistics
                Resource: '*'
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                Resource: !Sub 'arn:aws:s3:::idle-resources-reports-${AWS::AccountId}/*'

  # Lambda Function
  IdleResourcesDetectionFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: IdleResourcesDetection
      Description: Scans for idle AWS resources and exports a report to S3
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt IdleResourcesLambdaRole.Arn
      Timeout: 300
      MemorySize: 256
      Environment:
        Variables:
          S3_BUCKET_NAME: !Ref IdleResourcesReportBucket
          TARGET_REGION: !Ref AWSRegion
      Code:
        ZipFile: |
          import boto3
          import csv
          import io
          import datetime
          import os
          from datetime import datetime, timezone, timedelta
          
          def lambda_handler(event, context):
              # Get region from environment variable
              region = os.environ['TARGET_REGION']
              
              # Initialize AWS clients
              ec2_client = boto3.client('ec2', region_name=region)
              elb_client = boto3.client('elb', region_name=region)
              elbv2_client = boto3.client('elbv2', region_name=region)
              lambda_client = boto3.client('lambda', region_name=region)
              iam_client = boto3.client('iam', region_name=region)
              cloudwatch_client = boto3.client('cloudwatch', region_name=region)
              s3_client = boto3.client('s3', region_name=region)
              
              # Get bucket name from environment variable
              bucket_name = os.environ['S3_BUCKET_NAME']
              
              # Get current date and time for filename
              current_datetime = datetime.now().strftime('%Y-%m-%d-%H-%M-%S')
              csv_file_name = f"idle-resources-{current_datetime}.csv"
              
              # Lists to store findings
              idle_resources = []
              
              # Find stopped EC2 instances
              stopped_instances = find_stopped_ec2_instances(ec2_client)
              for instance in stopped_instances:
                  idle_resources.append({
                      'ResourceType': 'EC2',
                      'ResourceId': instance['InstanceId'],
                      'Status': 'Stopped',
                      'IdleSince': instance.get('StoppedSince', 'Unknown'),
                      'AdditionalInfo': f"Name: {instance.get('Name', 'N/A')}"
                  })
              
              # Find unattached EBS volumes
              unattached_volumes = find_unattached_volumes(ec2_client)
              for volume in unattached_volumes:
                  idle_resources.append({
                      'ResourceType': 'EBS Volume',
                      'ResourceId': volume['VolumeId'],
                      'Status': 'Available (Unattached)',
                      'IdleSince': volume.get('CreatedSince', 'Unknown'),
                      'AdditionalInfo': f"Size: {volume.get('Size', 'N/A')} GB, Type: {volume.get('VolumeType', 'N/A')}"
                  })
              
              # Find idle snapshots (older than 30 days and not associated with AMIs)
              idle_snapshots = find_idle_snapshots(ec2_client)
              for snapshot in idle_snapshots:
                  idle_resources.append({
                      'ResourceType': 'EBS Snapshot',
                      'ResourceId': snapshot['SnapshotId'],
                      'Status': 'Idle',
                      'IdleSince': snapshot.get('StartTime', 'Unknown'),
                      'AdditionalInfo': f"Size: {snapshot.get('Size', 'N/A')} GB, Description: {snapshot.get('Description', 'N/A')}"
                  })
              
              # Find idle load balancers
              idle_classic_elbs = find_idle_classic_elbs(elb_client, cloudwatch_client)
              for elb in idle_classic_elbs:
                  idle_resources.append({
                      'ResourceType': 'Classic ELB',
                      'ResourceId': elb['LoadBalancerName'],
                      'Status': 'Idle',
                      'IdleSince': elb.get('IdleSince', 'Unknown'),
                      'AdditionalInfo': f"DNS Name: {elb.get('DNSName', 'N/A')}"
                  })
              
              idle_albs_nlbs = find_idle_albs_nlbs(elbv2_client, cloudwatch_client)
              for lb in idle_albs_nlbs:
                  lb_type = "ALB" if lb['Type'] == 'application' else "NLB"
                  idle_resources.append({
                      'ResourceType': lb_type,
                      'ResourceId': lb['LoadBalancerName'],
                      'Status': 'Idle',
                      'IdleSince': lb.get('IdleSince', 'Unknown'),
                      'AdditionalInfo': f"DNS Name: {lb.get('DNSName', 'N/A')}, ARN: {lb.get('LoadBalancerArn', 'N/A')}"
                  })
              
              # Find unused security groups
              unused_security_groups = find_unused_security_groups(ec2_client)
              for sg in unused_security_groups:
                  idle_resources.append({
                      'ResourceType': 'Security Group',
                      'ResourceId': sg['GroupId'],
                      'Status': 'Unused',
                      'IdleSince': 'Unknown',
                      'AdditionalInfo': f"Name: {sg.get('GroupName', 'N/A')}, Description: {sg.get('Description', 'N/A')}"
                  })
              
              # Find unassociated elastic IPs
              unassociated_eips = find_unassociated_eips(ec2_client)
              for eip in unassociated_eips:
                  idle_resources.append({
                      'ResourceType': 'Elastic IP',
                      'ResourceId': eip['AllocationId'],
                      'Status': 'Unassociated',
                      'IdleSince': 'Unknown',
                      'AdditionalInfo': f"Public IP: {eip.get('PublicIp', 'N/A')}"
                  })
              
              # Find idle Lambda functions
              idle_lambdas = find_idle_lambda_functions(lambda_client, cloudwatch_client)
              for func in idle_lambdas:
                  idle_resources.append({
                      'ResourceType': 'Lambda Function',
                      'ResourceId': func['FunctionName'],
                      'Status': 'Idle',
                      'IdleSince': func.get('IdleSince', '> 30 days'),
                      'AdditionalInfo': f"Runtime: {func.get('Runtime', 'N/A')}, Last Modified: {func.get('LastModified', 'N/A')}"
                  })
              
              # Find IAM roles without policies
              empty_roles = find_iam_roles_without_policies(iam_client)
              for role in empty_roles:
                  idle_resources.append({
                      'ResourceType': 'IAM Role',
                      'ResourceId': role['RoleName'],
                      'Status': 'No Policies',
                      'IdleSince': role.get('CreateDate', 'Unknown'),
                      'AdditionalInfo': f"Path: {role.get('Path', 'N/A')}, ARN: {role.get('Arn', 'N/A')}"
                  })
              
              # Create CSV in memory
              csv_file = io.StringIO()
              fieldnames = ['ResourceType', 'ResourceId', 'Status', 'IdleSince', 'AdditionalInfo']
              writer = csv.DictWriter(csv_file, fieldnames=fieldnames)
              writer.writeheader()
              
              for resource in idle_resources:
                  writer.writerow(resource)
              
              # Upload to S3
              s3_client.put_object(
                  Bucket=bucket_name,
                  Key=csv_file_name,
                  Body=csv_file.getvalue(),
                  ContentType='text/csv'
              )
              
              return {
                  'statusCode': 200,
                  'body': f"Successfully identified {len(idle_resources)} idle resources and saved to s3://{bucket_name}/{csv_file_name}"
              }
          
          def find_stopped_ec2_instances(ec2_client):
              instances = []
              response = ec2_client.describe_instances(
                  Filters=[
                      {
                          'Name': 'instance-state-name',
                          'Values': ['stopped']
                      }
                  ]
              )
              
              for reservation in response['Reservations']:
                  for instance in reservation['Instances']:
                      name = 'N/A'
                      for tag in instance.get('Tags', []):
                          if tag['Key'] == 'Name':
                              name = tag['Value']
                              break
                              
                      instances.append({
                          'InstanceId': instance['InstanceId'],
                          'Name': name,
                          'StoppedSince': instance.get('StateTransitionReason', 'Unknown').replace('User initiated (', '').replace(')', '') if 'User initiated' in instance.get('StateTransitionReason', '') else 'Unknown'
                      })
              
              return instances
          
          def find_unattached_volumes(ec2_client):
              volumes = []
              response = ec2_client.describe_volumes(
                  Filters=[
                      {
                          'Name': 'status',
                          'Values': ['available']
                      }
                  ]
              )
              
              for volume in response['Volumes']:
                  volumes.append({
                      'VolumeId': volume['VolumeId'],
                      'Size': volume['Size'],
                      'VolumeType': volume['VolumeType'],
                      'CreatedSince': volume['CreateTime'].strftime('%Y-%m-%d')
                  })
              
              return volumes
          
          def find_idle_snapshots(ec2_client):
              # Get all snapshots owned by this account
              snapshots = []
              response = ec2_client.describe_snapshots(OwnerIds=['self'])
              
              # Get snapshots used by AMIs
              images = ec2_client.describe_images(Owners=['self'])
              used_snapshot_ids = set()
              
              for image in images['Images']:
                  for block_device in image.get('BlockDeviceMappings', []):
                      if 'Ebs' in block_device and 'SnapshotId' in block_device['Ebs']:
                          used_snapshot_ids.add(block_device['Ebs']['SnapshotId'])
              
              # Threshold for idle snapshots (30 days)
              threshold_date = datetime.now(timezone.utc) - timedelta(days=30)
              
              for snapshot in response['Snapshots']:
                  # Skip if used by an AMI
                  if snapshot['SnapshotId'] in used_snapshot_ids:
                      continue
                  
                  # Check if older than threshold
                  if snapshot['StartTime'] < threshold_date:
                      snapshots.append({
                          'SnapshotId': snapshot['SnapshotId'],
                          'StartTime': snapshot['StartTime'].strftime('%Y-%m-%d'),
                          'Size': snapshot.get('VolumeSize', 'N/A'),
                          'Description': snapshot.get('Description', 'N/A')
                      })
              
              return snapshots
          
          def find_idle_classic_elbs(elb_client, cloudwatch_client):
              idle_elbs = []
              response = elb_client.describe_load_balancers()
              
              for lb in response.get('LoadBalancerDescriptions', []):
                  lb_name = lb['LoadBalancerName']
                  
                  # Check CloudWatch metrics for request count over the last 7 days
                  end_time = datetime.now(timezone.utc)
                  start_time = end_time - timedelta(days=7)
                  
                  response = cloudwatch_client.get_metric_statistics(
                      Namespace='AWS/ELB',
                      MetricName='RequestCount',
                      Dimensions=[{'Name': 'LoadBalancerName', 'Value': lb_name}],
                      StartTime=start_time,
                      EndTime=end_time,
                      Period=86400,  # 1 day in seconds
                      Statistics=['Sum']
                  )
                  
                  # If no data points or sum is 0, consider it idle
                  if not response['Datapoints'] or all(dp['Sum'] == 0 for dp in response['Datapoints']):
                      idle_elbs.append({
                          'LoadBalancerName': lb_name,
                          'DNSName': lb.get('DNSName', 'N/A'),
                          'IdleSince': 'At least 7 days'
                      })
                      
              return idle_elbs
          
          def find_idle_albs_nlbs(elbv2_client, cloudwatch_client):
              idle_lbs = []
              response = elbv2_client.describe_load_balancers()
              
              for lb in response.get('LoadBalancers', []):
                  lb_arn = lb['LoadBalancerArn']
                  lb_name = lb['LoadBalancerName']
                  lb_type = lb['Type']  # 'application' or 'network'
                  
                  # Check if LB has active target groups
                  has_active_targets = False
                  
                  # Get target groups for this LB
                  tg_response = elbv2_client.describe_target_groups(LoadBalancerArn=lb_arn)
                  for tg in tg_response.get('TargetGroups', []):
                      tg_arn = tg['TargetGroupArn']
                      
                      # Check if target group has healthy targets
                      health_response = elbv2_client.describe_target_health(TargetGroupArn=tg_arn)
                      for target_health in health_response.get('TargetHealthDescriptions', []):
                          if target_health.get('TargetHealth', {}).get('State') == 'healthy':
                              has_active_targets = True
                              break
                      
                      if has_active_targets:
                          break
                  
                  if not has_active_targets:
                      # Also check CloudWatch metrics
                      metric_name = 'RequestCount' if lb_type == 'application' else 'ActiveFlowCount'
                      namespace = 'AWS/ApplicationELB' if lb_type == 'application' else 'AWS/NetworkELB'
                      
                      end_time = datetime.now(timezone.utc)
                      start_time = end_time - timedelta(days=7)
                      
                      try:
                          response = cloudwatch_client.get_metric_statistics(
                              Namespace=namespace,
                              MetricName=metric_name,
                              Dimensions=[{'Name': 'LoadBalancer', 'Value': lb_arn.split('/')[-1]}],
                              StartTime=start_time,
                              EndTime=end_time,
                              Period=86400,  # 1 day in seconds
                              Statistics=['Sum']
                          )
                          
                          # If no data points or sum is 0, consider it idle
                          if not response['Datapoints'] or all(dp['Sum'] == 0 for dp in response['Datapoints']):
                              idle_lbs.append({
                                  'LoadBalancerName': lb_name,
                                  'LoadBalancerArn': lb_arn,
                                  'Type': lb_type,
                                  'DNSName': lb.get('DNSName', 'N/A'),
                                  'IdleSince': 'At least 7 days'
                              })
                      except Exception as e:
                          # If error getting metrics, consider possibly idle based on lack of targets
                          idle_lbs.append({
                              'LoadBalancerName': lb_name,
                              'LoadBalancerArn': lb_arn,
                              'Type': lb_type,
                              'DNSName': lb.get('DNSName', 'N/A'),
                              'IdleSince': 'Unknown (No active targets)'
                          })
                      
              return idle_lbs
          
          def find_unused_security_groups(ec2_client):
              # Get all security groups
              all_sgs = ec2_client.describe_security_groups()['SecurityGroups']
              used_sg_ids = set()
              
              # Get security groups used by EC2 instances
              instances = ec2_client.describe_instances()
              for reservation in instances['Reservations']:
                  for instance in reservation['Instances']:
                      for sg in instance.get('SecurityGroups', []):
                          used_sg_ids.add(sg['GroupId'])
              
              # Get security groups used by network interfaces
              network_interfaces = ec2_client.describe_network_interfaces()
              for ni in network_interfaces['NetworkInterfaces']:
                  for sg in ni.get('Groups', []):
                      used_sg_ids.add(sg['GroupId'])
              
              # Filter out used security groups and the default security group
              unused_sgs = []
              for sg in all_sgs:
                  if sg['GroupId'] not in used_sg_ids and sg['GroupName'] != 'default':
                      unused_sgs.append(sg)
              
              return unused_sgs
          
          def find_unassociated_eips(ec2_client):
              unassociated_eips = []
              addresses = ec2_client.describe_addresses()
              
              for address in addresses.get('Addresses', []):
                  if 'AssociationId' not in address:
                      unassociated_eips.append({
                          'AllocationId': address['AllocationId'],
                          'PublicIp': address['PublicIp']
                      })
                      
              return unassociated_eips
          
          def find_idle_lambda_functions(lambda_client, cloudwatch_client):
              idle_functions = []
              functions = lambda_client.list_functions()
              
              for function in functions.get('Functions', []):
                  function_name = function['FunctionName']
                  
                  # Check CloudWatch metrics for invocations over the last 30 days
                  end_time = datetime.now(timezone.utc)
                  start_time = end_time - timedelta(days=30)
                  
                  response = cloudwatch_client.get_metric_statistics(
                      Namespace='AWS/Lambda',
                      MetricName='Invocations',
                      Dimensions=[{'Name': 'FunctionName', 'Value': function_name}],
                      StartTime=start_time,
                      EndTime=end_time,
                      Period=2592000,  # 30 days in seconds
                      Statistics=['Sum']
                  )
                  
                  # If no data points or sum is 0, consider it idle
                  if not response['Datapoints'] or all(dp['Sum'] == 0 for dp in response['Datapoints']):
                      idle_functions.append({
                          'FunctionName': function_name,
                          'Runtime': function.get('Runtime', 'N/A'),
                          'LastModified': function.get('LastModified', 'N/A'),
                          'IdleSince': 'At least 30 days'
                      })
                      
              return idle_functions
          
          def find_iam_roles_without_policies(iam_client):
              empty_roles = []
              paginator = iam_client.get_paginator('list_roles')
              
              for page in paginator.paginate():
                  for role in page['Roles']:
                      role_name = role['RoleName']
                      
                      # Skip service-linked roles
                      if role_name.startswith('AWSServiceRole') or 'service-role' in role.get('Path', ''):
                          continue
                      
                      # Check attached policies
                      attached_policies = iam_client.list_attached_role_policies(RoleName=role_name)
                      
                      if not attached_policies['AttachedPolicies']:
                          # Format date as string if it's a datetime object
                          if isinstance(role.get('CreateDate'), datetime):
                              create_date = role['CreateDate'].strftime('%Y-%m-%d')
                          else:
                              create_date = str(role.get('CreateDate', 'Unknown'))
                              
                          empty_roles.append({
                              'RoleName': role_name,
                              'Path': role.get('Path', 'N/A'),
                              'Arn': role.get('Arn', 'N/A'),
                              'CreateDate': create_date
                          })
                      
              return empty_roles

  # CloudWatch Events Rule to trigger Lambda on schedule
  IdleResourcesScheduleRule:
    Type: AWS::Events::Rule
    Properties:
      Name: IdleResourcesDetectionSchedule
      Description: 'Triggers the IdleResourcesDetection Lambda function daily'
      ScheduleExpression: 'rate(1 day)'
      State: ENABLED
      Targets:
        - Arn: !GetAtt IdleResourcesDetectionFunction.Arn
          Id: IdleResourcesTarget

  # Permission for CloudWatch Events to trigger the Lambda function
  IdleResourcesPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref IdleResourcesDetectionFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt IdleResourcesScheduleRule.Arn

Outputs:
  S3BucketName:
    Description: The name of the S3 bucket storing idle resources reports
    Value: !Ref IdleResourcesReportBucket
  LambdaFunction:
    Description: The Lambda function that detects idle resources
    Value: !Ref IdleResourcesDetectionFunction
  ScheduleRule:
    Description: The CloudWatch Events rule that triggers the Lambda function
    Value: !Ref IdleResourcesScheduleRule
  RegionUsed:
    Description: The AWS region used to scan for idle resources
    Value: !Ref AWSRegion
