#!/bin/bash

# Script to check and disable CloudWatch alarm actions for given EC2 instances
# Author: AWS Engineer
# Requirements: AWS CLI, jq

INPUT_CSV="ec2_instance_ids.csv"
OUTPUT_CSV="cloudwatch_alarm_action_status_disabled_$(date '+%Y%m%d-%H%M%S').csv"
PROFILES_FILE="profiles.txt"
SSO_SESSION_NAME="${SSO_SESSION_NAME:-readonly}"

# Color codes
GREEN='\033[0;32m'
RED='\033[0;31m'
NC='\033[0m'

# Validate dependencies
if ! command -v aws >/dev/null 2>&1; then
  echo -e "${RED}AWS CLI not installed. Exiting.${NC}"
  exit 1
fi

if ! command -v jq >/dev/null 2>&1; then
  echo -e "${RED}jq is required. Please install jq and retry.${NC}"
  exit 1
fi

# Check if input CSV exists
if [[ ! -f "$INPUT_CSV" ]]; then
  echo -e "${RED}Input file $INPUT_CSV not found. Exiting.${NC}"
  exit 1
fi

# Load instance IDs (skip header if present)
INSTANCE_IDS=()
while IFS=, read -r INSTANCE_ID; do
  INSTANCE_ID=$(echo "$INSTANCE_ID" | tr -d '\r\n ' )
  [[ -z "$INSTANCE_ID" || "$INSTANCE_ID" == "InstanceId" ]] && continue
  INSTANCE_IDS+=("$INSTANCE_ID")
done < "$INPUT_CSV"

if [[ ${#INSTANCE_IDS[@]} -eq 0 ]]; then
  echo -e "${RED}No instance IDs found in $INPUT_CSV. Exiting.${NC}"
  exit 1
fi

# Load profiles from profiles.txt (generated by script 01)
if [[ ! -f "$PROFILES_FILE" ]]; then
  echo -e "${RED}Profiles file '$PROFILES_FILE' not found. Run the 01 script first to generate it.${NC}"
  exit 1
fi

PROFILES=()
while IFS= read -r p; do
  p=$(echo "$p" | tr -d '\r\n ' )
  [[ -z "$p" ]] && continue
  PROFILES+=("$p")
done < "$PROFILES_FILE"

if [[ ${#PROFILES[@]} -eq 0 ]]; then
  echo -e "${RED}No profiles found in $PROFILES_FILE. Exiting.${NC}"
  exit 1
fi

echo "Starting CloudWatch alarm action status check across ${#PROFILES[@]} profiles..."
echo "Profiles to process:"
for pr in "${PROFILES[@]}"; do echo "  - $pr"; done

# Perform a single SSO login for the session (consistent with script 01)
echo "🔑 Running single SSO login for session: $SSO_SESSION_NAME ..."
if ! aws sso login --sso-session "$SSO_SESSION_NAME"; then
  echo -e "${RED}SSO login failed. Please check your credentials and try again.${NC}"
  exit 1
fi

# Use a temporary file to avoid file locking issues on some environments
TEMP_OUTPUT="/tmp/cloudwatch_alarm_action_status_disabled_$$.csv"
echo "Profile,AccountId,InstanceID,AlarmName,ActionsEnabled,Status" > "$TEMP_OUTPUT"

# Process profiles and instances
for PROFILE in "${PROFILES[@]}"; do
  echo -e "\n➡️  Using profile: $PROFILE"
  ACCOUNT_ID=$(aws sts get-caller-identity --profile "$PROFILE" --query 'Account' --output text 2>/dev/null)
  if [[ -z "$ACCOUNT_ID" || "$ACCOUNT_ID" == "None" || "$ACCOUNT_ID" == "null" ]]; then
    echo -e "${RED}   Failed to authenticate with profile: $PROFILE${NC}"
    for INSTANCE_ID in "${INSTANCE_IDS[@]}"; do
      echo "$PROFILE,,${INSTANCE_ID},N/A,N/A,AuthFailed" >> "$TEMP_OUTPUT"
    done
    continue
  fi
  echo "   ✅ Authenticated (Account: $ACCOUNT_ID)"

  for INSTANCE_ID in "${INSTANCE_IDS[@]}"; do
    echo "🔍 Checking alarms for instance: $INSTANCE_ID"
    ALARMS_JSON=$(aws cloudwatch describe-alarms \
      --profile "$PROFILE" \
      --query "MetricAlarms[?contains(Dimensions[?Name=='InstanceId'].Value, '$INSTANCE_ID')]" \
      --output json 2>/dev/null)

    ALARM_COUNT=$(echo "$ALARMS_JSON" | jq 'length')
    if [[ -z "$ALARM_COUNT" || "$ALARM_COUNT" -eq 0 ]]; then
      echo "   No alarms found for $INSTANCE_ID."
      echo "$PROFILE,$ACCOUNT_ID,$INSTANCE_ID,N/A,N/A,No alarms found" >> "$TEMP_OUTPUT"
      continue
    fi

    echo "$ALARMS_JSON" | jq -c '.[]' | while read -r alarm; do
      ALARM_NAME=$(echo "$alarm" | jq -r '.AlarmName')
      ACTIONS_ENABLED=$(echo "$alarm" | jq -r '.ActionsEnabled')

      if [[ "$ACTIONS_ENABLED" == "true" ]]; then
        echo -e "   ⚠️  Alarm '$ALARM_NAME' actions are ENABLED. Disabling..."
        if aws cloudwatch disable-alarm-actions --profile "$PROFILE" --alarm-names "$ALARM_NAME" >/dev/null 2>&1; then
          echo "$PROFILE,$ACCOUNT_ID,$INSTANCE_ID,$ALARM_NAME,true,Disabled Now" >> "$TEMP_OUTPUT"
        else
          echo "$PROFILE,$ACCOUNT_ID,$INSTANCE_ID,$ALARM_NAME,true,Disable Failed" >> "$TEMP_OUTPUT"
        fi
      else
        echo -e "   ✅ Alarm '$ALARM_NAME' actions are already DISABLED."
        echo "$PROFILE,$ACCOUNT_ID,$INSTANCE_ID,$ALARM_NAME,false,Already Disabled" >> "$TEMP_OUTPUT"
      fi
    done
  done
done

# Move temp output to final CSV (compatible with Windows/Git Bash)
if ! cp "$TEMP_OUTPUT" "$OUTPUT_CSV" 2>/dev/null; then
  cat "$TEMP_OUTPUT" > "$OUTPUT_CSV"
fi
rm -f "$TEMP_OUTPUT"

# Summary
DISABLED_NOW=$(grep -c ',Disabled Now$' "$OUTPUT_CSV" 2>/dev/null || echo "0")
ALREADY_DISABLED=$(grep -c ',Already Disabled$' "$OUTPUT_CSV" 2>/dev/null || echo "0")
DISABLE_FAILED=$(grep -c ',Disable Failed$' "$OUTPUT_CSV" 2>/dev/null || echo "0")
NO_ALARMS=$(grep -c ',No alarms found$' "$OUTPUT_CSV" 2>/dev/null || echo "0")
AUTH_FAILED=$(grep -c ',AuthFailed$' "$OUTPUT_CSV" 2>/dev/null || echo "0")

echo -e "\n✅ Script execution completed."
echo "Output CSV file: $OUTPUT_CSV"
echo "Summary:"
echo "  Disabled Now     : $DISABLED_NOW"
echo "  Already Disabled : $ALREADY_DISABLED"
echo "  Disable Failed   : $DISABLE_FAILED"
echo "  No alarms found  : $NO_ALARMS"
echo "  Auth Failed      : $AUTH_FAILED"
