#!/bin/bash
# =====================================================================
# Script Name : get-ec2-instance-ids.sh
# Description : Get EC2 Instance IDs from server names using AWS CLI across multiple accounts
#               Uses profiles generated by 01.generate_aws_config.sh
# Author      : AWS Engineer
# =====================================================================

# Use temporary files for processing to avoid subshell variable scope issues
TEMP_DIR="/tmp/ec2_search_$$"
mkdir -p "$TEMP_DIR"
FOUND_SERVERS_FILE="$TEMP_DIR/found_servers.txt"
touch "$FOUND_SERVERS_FILE"

# Input/Output files
INPUT_FILE="servers.txt"
PROFILES_FILE="profiles.txt"
OUTPUT_FILE="instance_ids.csv"
TIMESTAMP=$(date +"%Y%m%d-%H%M%S")
LOG_FILE="ec2_search_${TIMESTAMP}.log"

# Check if the profiles file exists
if [ ! -f "$PROFILES_FILE" ]; then
    echo "‚ùå Error: Profiles file '$PROFILES_FILE' not found!"
    echo "Please run 01.generate_aws_config.sh first to generate AWS profiles."
    exit 1
fi

# Check if the servers file exists
if [ ! -f "$INPUT_FILE" ]; then
    echo "‚ùå Error: Servers file '$INPUT_FILE' not found!"
    echo "Please create a file named '$INPUT_FILE' with server names (one per line)."
    exit 1
fi

# Read profiles into an array
PROFILES=()
while IFS= read -r profile || [ -n "$profile" ]; do
    # Skip empty lines
    if [ -n "$profile" ]; then
        profile=$(echo "$profile" | tr -d '\r' | xargs)
        PROFILES+=("$profile")
    fi
done < "$PROFILES_FILE"

# Check if we have any profiles
if [ ${#PROFILES[@]} -eq 0 ]; then
    echo "‚ùå Error: No profiles found in '$PROFILES_FILE'."
    echo "Please run 01.generate_aws_config.sh first to generate AWS profiles."
    exit 1
fi

echo "üîç Found ${#PROFILES[@]} AWS profiles to search across"

# Read servers into an array
SERVERS=()
while IFS= read -r server || [ -n "$server" ]; do
    # Skip empty lines and comments
    if [ -n "$server" ] && [[ ! "$server" == \#* ]] && [[ ! "$server" == //* ]]; then
        server=$(echo "$server" | tr -d '\r' | xargs)
        SERVERS+=("$server")
    fi
done < "$INPUT_FILE"

# Check if we have any servers
if [ ${#SERVERS[@]} -eq 0 ]; then
    echo "‚ùå Error: No server names found in '$INPUT_FILE'."
    exit 1
fi

echo "üîç Will search for ${#SERVERS[@]} servers across ${#PROFILES[@]} AWS accounts"

# Initialize output file with header and log file
echo "ServerName,AccountID,Region,InstanceID,State" > "$OUTPUT_FILE"
echo "AWS EC2 Instance Search Log - $(date)" > "$LOG_FILE"
echo "==========================================" >> "$LOG_FILE"

# Track overall statistics
TOTAL_FOUND=0
TOTAL_SEARCHED=0

# Initialize associative array to track found servers
declare -A FOUND_SERVERS

# Process each server across all profiles and regions
for SERVER_NAME in "${SERVERS[@]}"; do
    echo "üîç Searching for server: $SERVER_NAME across all accounts..."
    echo -e "\nSearching for server: $SERVER_NAME" >> "$LOG_FILE"
    SERVER_FOUND=false
    
    # Search across all profiles
    for PROFILE in "${PROFILES[@]}"; do
        echo "  üë§ Using profile: $PROFILE" 
        echo "  Using profile: $PROFILE" >> "$LOG_FILE"
        
        # Get account ID for logging
        ACCOUNT_ID=$(aws sts get-caller-identity --profile "$PROFILE" --query 'Account' --output text 2>/dev/null)
        if [ $? -ne 0 ]; then
            echo "    ‚ö†Ô∏è Failed to authenticate with profile $PROFILE. Skipping..."
            echo "    Failed to authenticate with profile $PROFILE. Skipping..." >> "$LOG_FILE"
            continue
        fi
        
        # Use a single region: ap-southeast-2
        REGION="ap-southeast-2"
        echo "    üåé Searching in region: $REGION"
        TOTAL_SEARCHED=$((TOTAL_SEARCHED + 1))
            
            # Fetch all instance IDs for the server name
            INSTANCES=$(aws ec2 describe-instances \
                --profile "$PROFILE" \
                --region "$REGION" \
                --filters "Name=tag:Name,Values=${SERVER_NAME}" \
                --query "Reservations[].Instances[].[InstanceId,State.Name]" \
                --output text 2>/dev/null)
            
            if [ $? -ne 0 ]; then
                echo "      ‚ö†Ô∏è Error searching in $REGION. Skipping..."
                echo "      Error searching in $REGION" >> "$LOG_FILE"
                continue
            fi
            
            # Process instances if found
            if [ -n "$INSTANCES" ]; then
                echo "      ‚úÖ Found instances in $REGION!"
                echo "      Found instances in $REGION" >> "$LOG_FILE"
                
                # Process each instance
                while read -r INSTANCE_ID STATE; do
                    # Skip empty lines
                    [ -z "$INSTANCE_ID" ] && continue
                    
                    echo "        üñ•Ô∏è Instance: $INSTANCE_ID ($STATE)"
                    echo "        Instance: $INSTANCE_ID ($STATE)" >> "$LOG_FILE"
                    
                    # Mark server as found in our tracking file
                    echo "$SERVER_NAME" >> "$FOUND_SERVERS_FILE"
                    
                    # Add to CSV with proper formatting
                    echo "\"$SERVER_NAME\",\"$ACCOUNT_ID\",\"$REGION\",\"$INSTANCE_ID\",\"$STATE\"" >> "$OUTPUT_FILE"
                    SERVER_FOUND=true
                    TOTAL_FOUND=$((TOTAL_FOUND + 1))
                done <<< "$INSTANCES"
            else
                echo "      ‚ùå No instances found in $REGION"
                echo "      No instances found in $REGION" >> "$LOG_FILE"
            fi
        done
    
    # Check if server was found by looking for its entry in the tracking file
    if ! grep -q "^${SERVER_NAME}$" "$FOUND_SERVERS_FILE"; then
        echo "  ‚ùå Server $SERVER_NAME not found in any account/region"
        echo "  Server $SERVER_NAME not found in any account/region" >> "$LOG_FILE"
        echo "\"$SERVER_NAME\",\"NOT_FOUND\",\"NOT_FOUND\",\"NOT_FOUND\",\"NOT_FOUND\"" >> "$OUTPUT_FILE"
    fi
done

echo ""
echo "üéâ Search complete!"
echo "üìä Summary: Found $TOTAL_FOUND instances after $TOTAL_SEARCHED searches"
echo "üìã Results saved in $OUTPUT_FILE"
echo "üìù Logs saved in $LOG_FILE"

# Clean up temp directory
rm -rf "$TEMP_DIR"
