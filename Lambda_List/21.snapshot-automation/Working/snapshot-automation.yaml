AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for tagging snapshots across all AWS services (EC2, RDS, FSx, etc.)'

Resources:
  SnapshotTaggerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SnapshotTaggingPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # EC2/EBS permissions
              - Effect: Allow
                Action:
                  - ec2:CreateTags
                  - ec2:DescribeSnapshots
                  - ec2:DescribeVolumes
                  - ec2:DescribeInstances
                Resource: '*'
              # RDS permissions
              - Effect: Allow
                Action:
                  - rds:AddTagsToResource
                  - rds:DescribeDBSnapshots
                  - rds:DescribeDBClusterSnapshots
                  - rds:ListTagsForResource
                Resource: '*'
              # FSx permissions
              - Effect: Allow
                Action:
                  - fsx:TagResource
                  - fsx:DescribeBackups
                  - fsx:ListTagsForResource
                Resource: '*'
              # AWS Backup permissions
              - Effect: Allow
                Action:
                  - backup:DescribeBackupJob
                  - backup:ListTags
                  - backup:GetBackupPlan
                  - backup:ListRecoveryPointsByBackupVault
                  - backup:ListBackupJobs
                  - backup:TagResource
                  - backup:GetRecoveryPointRestoreMetadata
                Resource: '*'
              # CloudTrail permissions
              - Effect: Allow
                Action:
                  - cloudtrail:LookupEvents
                Resource: '*'
              # EFS permissions
              - Effect: Allow
                Action:
                  - elasticfilesystem:CreateTags
                  - elasticfilesystem:DescribeBackupPolicy
                  - elasticfilesystem:DescribeTags
                Resource: '*'

  BackupSnapshotTaggerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: UniversalSnapshotTagger
      Handler: index.lambda_handler
      Role: !GetAtt SnapshotTaggerRole.Arn
      Runtime: python3.12
      Timeout: 300
      MemorySize: 512
      Environment:
        Variables:
          LOG_LEVEL: INFO
      Code:
        ZipFile: |
          import boto3
          import json
          import datetime
          import logging
          import time
          import re
          from botocore.exceptions import ClientError
          
          # Configure logging
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          
          def lambda_handler(event, context):
              """
              Universal Lambda function that adds retention tags to snapshots/backups across all AWS services.
              """
              logger.info("====== STARTING UNIVERSAL SNAPSHOT TAGGING ======")
              logger.info(f"Event source: {event.get('source', 'Unknown')}")
              logger.info(f"Detail type: {event.get('detail-type', 'Unknown')}")
              logger.info(f"Raw event: {json.dumps(event, default=str)}")
              
              # Initialize counters
              resources_processed = 0
              resources_tagged = 0
              
              try:
                  # Determine event type and service
                  event_info = analyze_event(event)
                  logger.info(f"Detected event: {event_info}")
                  
                  # Process based on service type
                  if event_info['service'] == 'ec2':
                      resources_processed, resources_tagged = handle_ec2_events(event, event_info)
                  elif event_info['service'] == 'rds':
                      resources_processed, resources_tagged = handle_rds_events(event, event_info)
                  elif event_info['service'] == 'fsx':
                      resources_processed, resources_tagged = handle_fsx_events(event, event_info)
                  elif event_info['service'] == 'backup':
                      resources_processed, resources_tagged = handle_backup_events(event, event_info)
                  elif event_info['service'] == 'scheduled':
                      resources_processed, resources_tagged = handle_scheduled_execution(event)
                  else:
                      logger.warning(f"Unhandled service type: {event_info['service']}")
                      # Fallback to scan recent resources
                      resources_processed, resources_tagged = scan_recent_resources()
                
                  logger.info(f"Execution summary: {resources_processed} processed, {resources_tagged} tagged")
                  
              except Exception as e:
                  logger.error(f"Error in lambda_handler: {str(e)}")
                  return {
                      'statusCode': 500,
                      'body': json.dumps(f'Error: {str(e)}')
                  }
              
              logger.info("====== EXECUTION COMPLETE ======")
              return {
                  'statusCode': 200,
                  'body': json.dumps({
                      'message': 'Universal snapshot tagging completed',
                      'processed': resources_processed,
                      'tagged': resources_tagged
                  })
              }
          
          def analyze_event(event):
              """Analyze the event to determine service and action type."""
              event_info = {
                  'service': 'unknown',
                  'action': 'unknown',
                  'resource_id': None,
                  'resource_type': None
              }
              
              if not isinstance(event, dict):
                  return event_info
              
              source = event.get('source', '')
              detail_type = event.get('detail-type', '')
              detail = event.get('detail', {})
              
              # AWS Backup events
              if source == 'aws.backup':
                  event_info['service'] = 'backup'
                  if 'Backup Job State Change' in detail_type:
                      event_info['action'] = 'backup_job'
              
              # EC2/EBS events
              elif source == 'aws.ec2':
                  event_info['service'] = 'ec2'
                  if 'EBS Snapshot Notification' in detail_type:
                      event_info['action'] = 'snapshot_created'
                      event_info['resource_id'] = detail.get('snapshot-id')
                  elif 'AWS API Call via CloudTrail' in detail_type:
                      event_name = detail.get('eventName', '')
                      if event_name in ['CreateSnapshot', 'CreateSnapshots', 'CopySnapshot']:
                          event_info['action'] = 'api_snapshot_created'
              
              # RDS events
              elif source == 'aws.rds':
                  event_info['service'] = 'rds'
                  if 'RDS DB Snapshot Event' in detail_type:
                      event_info['action'] = 'db_snapshot_created'
                      event_info['resource_id'] = detail.get('SourceId')
                  elif 'RDS DB Cluster Snapshot Event' in detail_type:
                      event_info['action'] = 'cluster_snapshot_created'
                      event_info['resource_id'] = detail.get('SourceId')
                  elif 'AWS API Call via CloudTrail' in detail_type:
                      event_name = detail.get('eventName', '')
                      if event_name in ['CreateDBSnapshot', 'CreateDBClusterSnapshot']:
                          event_info['action'] = 'api_snapshot_created'
              
              # FSx events
              elif source == 'aws.fsx':
                  event_info['service'] = 'fsx'
                  if 'AWS API Call via CloudTrail' in detail_type:
                      event_name = detail.get('eventName', '')
                      if event_name == 'CreateBackup':
                          event_info['action'] = 'backup_created'
              
              # Scheduled events
              elif source == 'aws.events' or 'process_recent' in event:
                  event_info['service'] = 'scheduled'
                  event_info['action'] = 'scan_recent'
              
              return event_info
          
          def handle_ec2_events(event, event_info):
              """Handle EC2/EBS snapshot events."""
              processed = 0
              tagged = 0
              
              try:
                  snapshot_ids = []
                  
                  if event_info['action'] == 'snapshot_created':
                      snapshot_id = event.get('detail', {}).get('snapshot-id')
                      if snapshot_id:
                          snapshot_ids.append(snapshot_id)
                  
                  elif event_info['action'] == 'api_snapshot_created':
                      snapshot_ids = extract_snapshot_ids_from_api_event(event)
                  
                  # If no specific snapshots found, scan recent ones
                  if not snapshot_ids:
                      snapshot_ids = get_recent_ec2_snapshots(hours=2)
                  
                  for snapshot_id in snapshot_ids:
                      processed += 1
                      if tag_ec2_snapshot(snapshot_id):
                          tagged += 1
              
              except Exception as e:
                  logger.error(f"Error handling EC2 events: {str(e)}")
              
              return processed, tagged
          
          def handle_rds_events(event, event_info):
              """Handle RDS snapshot events."""
              processed = 0
              tagged = 0
              
              try:
                  snapshot_ids = []
                  
                  detail = event.get('detail', {})
                  
                  if event_info['action'] in ['db_snapshot_created', 'cluster_snapshot_created']:
                      source_id = detail.get('SourceId')
                      if source_id:
                          # Get the actual snapshot identifier from the event
                          snapshot_ids = get_rds_snapshots_by_source(source_id)
                  
                  elif event_info['action'] == 'api_snapshot_created':
                      snapshot_ids = extract_rds_snapshot_ids_from_api_event(event)
                  
                  # If no specific snapshots found, scan recent ones
                  if not snapshot_ids:
                      snapshot_ids = get_recent_rds_snapshots(hours=2)
                  
                  for snapshot_info in snapshot_ids:
                      processed += 1
                      if tag_rds_snapshot(snapshot_info):
                          tagged += 1
              
              except Exception as e:
                  logger.error(f"Error handling RDS events: {str(e)}")
              
              return processed, tagged
          
          def handle_fsx_events(event, event_info):
              """Handle FSx backup events."""
              processed = 0
              tagged = 0
              
              try:
                  backup_ids = []
                  
                  if event_info['action'] == 'backup_created':
                      backup_ids = extract_fsx_backup_ids_from_api_event(event)
                  
                  # If no specific backups found, scan recent ones
                  if not backup_ids:
                      backup_ids = get_recent_fsx_backups(hours=2)
                  
                  for backup_id in backup_ids:
                      processed += 1
                      if tag_fsx_backup(backup_id):
                          tagged += 1
              
              except Exception as e:
                  logger.error(f"Error handling FSx events: {str(e)}")
              
              return processed, tagged
          
          def handle_backup_events(event, event_info):
              """Handle AWS Backup service events."""
              processed = 0
              tagged = 0
              
              try:
                  detail = event.get('detail', {})
                  
                  if event_info['action'] == 'backup_job' and detail.get('state') == 'COMPLETED':
                      backup_job_id = detail.get('backupJobId')
                      if backup_job_id:
                          if tag_backup_recovery_point(backup_job_id):
                              processed += 1
                              tagged += 1
              
              except Exception as e:
                  logger.error(f"Error handling AWS Backup events: {str(e)}")
              
              return processed, tagged
          
          def handle_scheduled_execution(event):
              """Handle scheduled execution to tag recent snapshots."""
              logger.info("Running scheduled scan for recent snapshots")
              
              total_processed = 0
              total_tagged = 0
              
              # Scan EC2 snapshots
              ec2_processed, ec2_tagged = scan_recent_ec2_snapshots()
              total_processed += ec2_processed
              total_tagged += ec2_tagged
              
              # Scan RDS snapshots
              rds_processed, rds_tagged = scan_recent_rds_snapshots()
              total_processed += rds_processed
              total_tagged += rds_tagged
              
              # Scan FSx backups
              fsx_processed, fsx_tagged = scan_recent_fsx_backups()
              total_processed += fsx_processed
              total_tagged += fsx_tagged
              
              return total_processed, total_tagged
          
          def get_recent_ec2_snapshots(hours=24):
              """Get recent EC2 snapshots."""
              ec2 = boto3.client('ec2')
              start_time = datetime.datetime.now(datetime.timezone.utc) - datetime.timedelta(hours=hours)
              
              snapshots = []
              try:
                  paginator = ec2.get_paginator('describe_snapshots')
                  page_iterator = paginator.paginate(
                      OwnerIds=['self'],
                      Filters=[
                          {
                              'Name': 'start-time',
                              'Values': [start_time.strftime('%Y-%m-%dT%H:%M:%S.000Z')]
                          }
                      ]
                  )
                  
                  for page in page_iterator:
                      for snapshot in page['Snapshots']:
                          if not has_retention_tags(snapshot.get('Tags', [])):
                              snapshots.append(snapshot['SnapshotId'])
              
              except Exception as e:
                  logger.error(f"Error getting recent EC2 snapshots: {str(e)}")
              
              return snapshots
          
          def get_recent_rds_snapshots(hours=24):
              """Get recent RDS snapshots."""
              rds = boto3.client('rds')
              snapshots = []
              
              try:
                  # DB Snapshots
                  db_snapshots = rds.describe_db_snapshots(
                      SnapshotType='manual',
                      MaxRecords=100
                  )
                  
                  for snapshot in db_snapshots['DBSnapshots']:
                      snapshots.append({
                          'type': 'db',
                          'id': snapshot['DBSnapshotIdentifier'],
                          'arn': snapshot['DBSnapshotArn']
                      })
                  
                  # Cluster Snapshots
                  cluster_snapshots = rds.describe_db_cluster_snapshots(
                      SnapshotType='manual',
                      MaxRecords=100
                  )
                  
                  for snapshot in cluster_snapshots['DBClusterSnapshots']:
                      snapshots.append({
                          'type': 'cluster',
                          'id': snapshot['DBClusterSnapshotIdentifier'],
                          'arn': snapshot['DBClusterSnapshotArn']
                      })
              
              except Exception as e:
                  logger.error(f"Error getting recent RDS snapshots: {str(e)}")
              
              return snapshots
          
          def get_recent_fsx_backups(hours=24):
              """Get recent FSx backups."""
              fsx = boto3.client('fsx')
              backups = []
              
              try:
                  response = fsx.describe_backups(MaxResults=100)
                  
                  for backup in response['Backups']:
                      if backup['Lifecycle'] == 'AVAILABLE':
                          backups.append(backup['BackupId'])
              
              except Exception as e:
                  logger.error(f"Error getting recent FSx backups: {str(e)}")
              
              return backups
          
          def tag_ec2_snapshot(snapshot_id):
              """Tag an EC2 snapshot."""
              ec2 = boto3.client('ec2')
              
              try:
                  # Get snapshot details
                  response = ec2.describe_snapshots(SnapshotIds=[snapshot_id])
                  if not response['Snapshots']:
                      return False
                  
                  snapshot = response['Snapshots'][0]
                  
                  # Check if already tagged
                  if has_retention_tags(snapshot.get('Tags', [])):
                      logger.info(f"EC2 snapshot {snapshot_id} already tagged")
                      return True
                  
                  # Create retention tags
                  tags = create_retention_tags()
                  
                  ec2.create_tags(Resources=[snapshot_id], Tags=tags)
                  logger.info(f"Successfully tagged EC2 snapshot {snapshot_id}")
                  return True
                  
              except Exception as e:
                  logger.error(f"Error tagging EC2 snapshot {snapshot_id}: {str(e)}")
                  return False
          
          def tag_rds_snapshot(snapshot_info):
              """Tag an RDS snapshot."""
              rds = boto3.client('rds')
              
              try:
                  # Check if already tagged
                  existing_tags = rds.list_tags_for_resource(ResourceName=snapshot_info['arn'])
                  if has_retention_tags(existing_tags.get('TagList', [])):
                      logger.info(f"RDS snapshot {snapshot_info['id']} already tagged")
                      return True
                  
                  # Create retention tags
                  tags = create_retention_tags()
                  
                  rds.add_tags_to_resource(
                      ResourceName=snapshot_info['arn'],
                      Tags=tags
                  )
                  logger.info(f"Successfully tagged RDS snapshot {snapshot_info['id']}")
                  return True
                  
              except Exception as e:
                  logger.error(f"Error tagging RDS snapshot {snapshot_info['id']}: {str(e)}")
                  return False
          
          def tag_fsx_backup(backup_id):
              """Tag an FSx backup."""
              fsx = boto3.client('fsx')
              
              try:
                  # Get backup details
                  response = fsx.describe_backups(BackupIds=[backup_id])
                  if not response['Backups']:
                      return False
                  
                  backup = response['Backups'][0]
                  resource_arn = backup['ResourceARN']
                  
                  # Check if already tagged
                  existing_tags = fsx.list_tags_for_resource(ResourceARN=resource_arn)
                  if has_retention_tags(existing_tags.get('Tags', [])):
                      logger.info(f"FSx backup {backup_id} already tagged")
                      return True
                  
                  # Create retention tags
                  tags = create_retention_tags()
                  
                  fsx.tag_resource(
                      ResourceARN=resource_arn,
                      Tags=tags
                  )
                  logger.info(f"Successfully tagged FSx backup {backup_id}")
                  return True
                  
              except Exception as e:
                  logger.error(f"Error tagging FSx backup {backup_id}: {str(e)}")
                  return False
          
          def tag_backup_recovery_point(backup_job_id):
              """Tag an AWS Backup recovery point."""
              backup_client = boto3.client('backup')
              
              try:
                  # Get backup job details
                  job_response = backup_client.describe_backup_job(BackupJobId=backup_job_id)
                  recovery_point_arn = job_response.get('RecoveryPointArn')
                  
                  if not recovery_point_arn:
                      return False
                  
                  # Check if already tagged
                  existing_tags = backup_client.list_tags(ResourceArn=recovery_point_arn)
                  if has_retention_tags_backup_format(existing_tags.get('Tags', {})):
                      logger.info(f"Backup recovery point {recovery_point_arn} already tagged")
                      return True
                  
                  # Create retention tags
                  tags = create_retention_tags_backup_format()
                  
                  backup_client.tag_resource(
                      ResourceArn=recovery_point_arn,
                      Tags=tags
                  )
                  logger.info(f"Successfully tagged backup recovery point {recovery_point_arn}")
                  return True
                  
              except Exception as e:
                  logger.error(f"Error tagging backup recovery point for job {backup_job_id}: {str(e)}")
                  return False
          
          def create_retention_tags():
              """Create standard retention tags."""
              today = datetime.datetime.now(datetime.timezone.utc)
              delete_date = today + datetime.timedelta(days=90)
              
              return [
                  {'Key': 'Retention', 'Value': '90days'},
                  {'Key': 'DeleteOn', 'Value': delete_date.strftime('%Y-%m-%d')}
              ]
          
          def create_retention_tags_backup_format():
              """Create retention tags in AWS Backup format."""
              today = datetime.datetime.now(datetime.timezone.utc)
              delete_date = today + datetime.timedelta(days=90)
              
              return {
                  'Retention': '90days',
                  'DeleteOn': delete_date.strftime('%Y-%m-%d')
              }
          
          def has_retention_tags(tags):
              """Check if resource already has retention tags."""
              tag_keys = [tag.get('Key', '') for tag in tags]
              return 'Retention' in tag_keys and 'DeleteOn' in tag_keys
          
          def has_retention_tags_backup_format(tags):
              """Check if backup resource already has retention tags."""
              return 'Retention' in tags and 'DeleteOn' in tags
          
          def extract_snapshot_ids_from_api_event(event):
              """Extract snapshot IDs from CloudTrail API events."""
              snapshot_ids = []
              try:
                  detail = event.get('detail', {})
                  response_elements = detail.get('responseElements', {})
                  
                  # Handle single snapshot
                  if 'snapshot' in response_elements:
                      snapshot = response_elements['snapshot']
                      if 'snapshotId' in snapshot:
                          snapshot_ids.append(snapshot['snapshotId'])
                  
                  # Handle multiple snapshots
                  if 'snapshots' in response_elements:
                      for snapshot in response_elements['snapshots']:
                          if 'snapshotId' in snapshot:
                              snapshot_ids.append(snapshot['snapshotId'])
                  
              except Exception as e:
                  logger.error(f"Error extracting snapshot IDs from API event: {str(e)}")
              
              return snapshot_ids
          
          def extract_rds_snapshot_ids_from_api_event(event):
              """Extract RDS snapshot IDs from CloudTrail API events."""
              snapshots = []
              try:
                  detail = event.get('detail', {})
                  response_elements = detail.get('responseElements', {})
                  
                  # DB Snapshot
                  if 'dBSnapshot' in response_elements:
                      snapshot = response_elements['dBSnapshot']
                      snapshots.append({
                          'type': 'db',
                          'id': snapshot.get('dBSnapshotIdentifier'),
                          'arn': snapshot.get('dBSnapshotArn')
                      })
                  
                  # Cluster Snapshot
                  if 'dBClusterSnapshot' in response_elements:
                      snapshot = response_elements['dBClusterSnapshot']
                      snapshots.append({
                          'type': 'cluster',
                          'id': snapshot.get('dBClusterSnapshotIdentifier'),
                          'arn': snapshot.get('dBClusterSnapshotArn')
                      })
              
              except Exception as e:
                  logger.error(f"Error extracting RDS snapshot IDs from API event: {str(e)}")
              
              return snapshots
          
          def extract_fsx_backup_ids_from_api_event(event):
              """Extract FSx backup IDs from CloudTrail API events."""
              backup_ids = []
              try:
                  detail = event.get('detail', {})
                  response_elements = detail.get('responseElements', {})
                  
                  if 'backup' in response_elements:
                      backup = response_elements['backup']
                      if 'backupId' in backup:
                          backup_ids.append(backup['backupId'])
              
              except Exception as e:
                  logger.error(f"Error extracting FSx backup IDs from API event: {str(e)}")
              
              return backup_ids
          
          def get_rds_snapshots_by_source(source_id):
              """Get RDS snapshots by source identifier."""
              rds = boto3.client('rds')
              snapshots = []
              
              try:
                  # Try DB snapshots first
                  try:
                      db_snapshots = rds.describe_db_snapshots(DBInstanceIdentifier=source_id)
                      for snapshot in db_snapshots['DBSnapshots']:
                          snapshots.append({
                              'type': 'db',
                              'id': snapshot['DBSnapshotIdentifier'],
                              'arn': snapshot['DBSnapshotArn']
                          })
                  except:
                      pass
                  
                  # Try cluster snapshots
                  try:
                      cluster_snapshots = rds.describe_db_cluster_snapshots(DBClusterIdentifier=source_id)
                      for snapshot in cluster_snapshots['DBClusterSnapshots']:
                          snapshots.append({
                              'type': 'cluster',
                              'id': snapshot['DBClusterSnapshotIdentifier'],
                              'arn': snapshot['DBClusterSnapshotArn']
                          })
                  except:
                      pass
              
              except Exception as e:
                  logger.error(f"Error getting RDS snapshots by source {source_id}: {str(e)}")
              
              return snapshots
          
          def scan_recent_resources():
              """Fallback method to scan recent resources."""
              return handle_scheduled_execution({})
          
          def scan_recent_ec2_snapshots():
              """Scan and tag recent EC2 snapshots."""
              snapshots = get_recent_ec2_snapshots(hours=24)
              processed = 0
              tagged = 0
              
              for snapshot_id in snapshots:
                  processed += 1
                  if tag_ec2_snapshot(snapshot_id):
                      tagged += 1
              
              logger.info(f"EC2 scan: {processed} processed, {tagged} tagged")
              return processed, tagged
          
          def scan_recent_rds_snapshots():
              """Scan and tag recent RDS snapshots."""
              snapshots = get_recent_rds_snapshots(hours=24)
              processed = 0
              tagged = 0
              
              for snapshot_info in snapshots:
                  processed += 1
                  if tag_rds_snapshot(snapshot_info):
                      tagged += 1
              
              logger.info(f"RDS scan: {processed} processed, {tagged} tagged")
              return processed, tagged
          
          def scan_recent_fsx_backups():
              """Scan and tag recent FSx backups."""
              backups = get_recent_fsx_backups(hours=24)
              processed = 0
              tagged = 0
              
              for backup_id in backups:
                  processed += 1
                  if tag_fsx_backup(backup_id):
                      tagged += 1
              
              logger.info(f"FSx scan: {processed} processed, {tagged} tagged")
              return processed, tagged

  # AWS Backup completion events
  BackupCompletionRule:
    Type: AWS::Events::Rule
    Properties:
      Name: AWSBackupCompletionRule
      Description: 'Trigger when AWS Backup jobs complete'
      EventPattern:
        source:
          - aws.backup
        detail-type:
          - 'Backup Job State Change'
        detail:
          state:
            - COMPLETED
      State: ENABLED
      Targets:
        - Arn: !GetAtt BackupSnapshotTaggerFunction.Arn
          Id: BackupCompletionTarget

  BackupCompletionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref BackupSnapshotTaggerFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt BackupCompletionRule.Arn

  # EC2 Snapshot state change events
  EC2SnapshotStateRule:
    Type: AWS::Events::Rule
    Properties:
      Name: EC2SnapshotStateChangeRule
      Description: 'Trigger on EC2 snapshot state changes'
      EventPattern:
        source:
          - aws.ec2
        detail-type:
          - 'EBS Snapshot Notification'
        detail:
          state:
            - completed
      State: ENABLED
      Targets:
        - Arn: !GetAtt BackupSnapshotTaggerFunction.Arn
          Id: EC2SnapshotStateTarget

  EC2SnapshotStatePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref BackupSnapshotTaggerFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EC2SnapshotStateRule.Arn

  # RDS Snapshot events
  RDSSnapshotRule:
    Type: AWS::Events::Rule
    Properties:
      Name: RDSSnapshotEventRule
      Description: 'Trigger on RDS snapshot completion'
      EventPattern:
        source:
          - aws.rds
        detail-type:
          - 'RDS DB Snapshot Event'
          - 'RDS DB Cluster Snapshot Event'
        detail:
          EventCategories:
            - creation
      State: ENABLED
      Targets:
        - Arn: !GetAtt BackupSnapshotTaggerFunction.Arn
          Id: RDSSnapshotTarget

  RDSSnapshotPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref BackupSnapshotTaggerFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt RDSSnapshotRule.Arn

  # CloudTrail API events for all services
  CloudTrailSnapshotRule:
    Type: AWS::Events::Rule
    Properties:
      Name: CloudTrailSnapshotCreationRule
      Description: 'Trigger on snapshot/backup creation API calls'
      EventPattern:
        source:
          - aws.ec2
          - aws.rds
          - aws.fsx
        detail-type:
          - 'AWS API Call via CloudTrail'
        detail:
          eventName:
            # EC2 events
            - CreateSnapshot
            - CreateSnapshots
            - CopySnapshot
            # RDS events
            - CreateDBSnapshot
            - CreateDBClusterSnapshot
            - CopyDBSnapshot
            - CopyDBClusterSnapshot
            # FSx events
            - CreateBackup
          responseElements:
            - exists: true
      State: ENABLED
      Targets:
        - Arn: !GetAtt BackupSnapshotTaggerFunction.Arn
          Id: CloudTrailSnapshotTarget

  CloudTrailSnapshotPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref BackupSnapshotTaggerFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt CloudTrailSnapshotRule.Arn

  # Scheduled execution for cleanup
  ScheduledSnapshotTaggingRule:
    Type: AWS::Events::Rule
    Properties:
      Name: DailySnapshotTagging
      Description: 'Daily cleanup to tag any missed snapshots across all services'
      ScheduleExpression: 'cron(0 6 * * ? *)' # Run at 6 AM UTC daily
      State: ENABLED
      Targets:
        - Arn: !GetAtt BackupSnapshotTaggerFunction.Arn
          Id: ScheduledTaggingTarget
          Input: '{"process_recent": true, "hours": 24}'

  ScheduledTaggingPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref BackupSnapshotTaggerFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt ScheduledSnapshotTaggingRule.Arn

  # Add hourly cleanup for faster response
  HourlySnapshotTaggingRule:
    Type: AWS::Events::Rule
    Properties:
      Name: HourlySnapshotTagging
      Description: 'Hourly cleanup to tag any missed snapshots'
      ScheduleExpression: 'cron(0 * * * ? *)' # Run every hour
      State: ENABLED
      Targets:
        - Arn: !GetAtt BackupSnapshotTaggerFunction.Arn
          Id: HourlyTaggingTarget
          Input: '{"process_recent": true, "hours": 2}'

  HourlyTaggingPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref BackupSnapshotTaggerFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt HourlySnapshotTaggingRule.Arn

Outputs:
  UniversalSnapshotTaggerFunctionArn:
    Description: ARN of the Universal Snapshot Tagger Lambda function
    Value: !GetAtt BackupSnapshotTaggerFunction.Arn

  BackupCompletionRuleArn:
    Description: ARN of the EventBridge rule for Backup job completion
    Value: !GetAtt BackupCompletionRule.Arn
    
  ScheduledTaggingRuleArn:
    Description: ARN of the EventBridge rule for scheduled tagging
    Value: !GetAtt ScheduledSnapshotTaggingRule.Arn
    
  EC2SnapshotRuleArn:
    Description: ARN of the EventBridge rule for EC2 snapshot notifications
    Value: !GetAtt EC2SnapshotStateRule.Arn
    
  RDSSnapshotRuleArn:
    Description: ARN of the EventBridge rule for RDS snapshot events
    Value: !GetAtt RDSSnapshotRule.Arn
    
  CloudTrailSnapshotRuleArn:
    Description: ARN of the EventBridge rule for CloudTrail snapshot creation events
    Value: !GetAtt CloudTrailSnapshotRule.Arn
    
  HourlyTaggingRuleArn:
    Description: ARN of the EventBridge rule for hourly tagging
    Value: !GetAtt HourlySnapshotTaggingRule.Arn