AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Automatically tag EBS snapshots with 90-day retention and list stale snapshots.

Parameters:
  RetentionDays:
    Type: Number
    Default: 90
    Description: Number of days to keep snapshots before considering for deletion.

Resources:

  SnapshotLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: SnapshotLambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
            Action: sts:AssumeRole
      Policies:
        - PolicyName: SnapshotLambdaPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ec2:CreateTags
                  - ec2:DescribeSnapshots
                  - ec2:DescribeVolumes
                  - ec2:DescribeInstances
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  TagSnapshotFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: TagSnapshotOnCreate
      Runtime: python3.12
      Handler: index.lambda_handler
      Role: !GetAtt SnapshotLambdaExecutionRole.Arn
      Timeout: 30
      Code:
        ZipFile: |
          import boto3
          import json
          from datetime import datetime, timedelta

          ec2 = boto3.client('ec2')

          def lambda_handler(event, context):
              print(f"Received event: {json.dumps(event, default=str)}")
              
              try:
                  # Handle both CloudTrail and direct EC2 events
                  snapshot_id = None
                  
                  if 'detail' in event:
                      # CloudTrail event format
                      if 'responseElements' in event['detail']:
                          snapshot_id = event['detail']['responseElements']['snapshotId']
                      # Direct EC2 event format
                      elif 'snapshot-id' in event['detail']:
                          snapshot_id = event['detail']['snapshot-id']
                      # Alternative EC2 event format
                      elif 'resources' in event['detail']:
                          snapshot_id = event['detail']['resources'][0]
                  
                  if not snapshot_id:
                      print("Could not extract snapshot ID from event")
                      return {"statusCode": 400, "body": "No snapshot ID found"}
                  
                  print(f"Processing snapshot: {snapshot_id}")
                  
                  # Calculate deletion date
                  delete_on = (datetime.utcnow() + timedelta(days=90)).strftime('%Y-%m-%d')
                  
                  # Tag the snapshot
                  response = ec2.create_tags(
                      Resources=[snapshot_id],
                      Tags=[
                          {'Key': 'DeleteOn', 'Value': delete_on},
                          {'Key': 'Retention', 'Value': '90days'},
                          {'Key': 'AutoTagged', 'Value': 'true'},
                          {'Key': 'TaggedBy', 'Value': 'Lambda-AutoTagger'}
                      ]
                  )
                  
                  print(f"Successfully tagged snapshot {snapshot_id} for deletion on {delete_on}")
                  return {
                      "statusCode": 200,
                      "body": f"Snapshot {snapshot_id} tagged for deletion on {delete_on}"
                  }
                  
              except Exception as e:
                  print(f"Error processing snapshot: {str(e)}")
                  return {
                      "statusCode": 500,
                      "body": f"Error: {str(e)}"
                  }

  # Primary EventBridge rule for EBS snapshot state changes
  EventRuleForSnapshotCreation:
    Type: AWS::Events::Rule
    Properties:
      Name: TagSnapshotOnCreateRule
      Description: Trigger Lambda when EBS snapshot is created
      EventPattern:
        source:
          - "aws.ec2"
        detail-type:
          - "EBS Snapshot Notification"
        detail:
          state:
            - "completed"
      Targets:
        - Arn: !GetAtt TagSnapshotFunction.Arn
          Id: "TagSnapshotFunctionTarget"

  # Backup EventBridge rule for CloudTrail events (if CloudTrail is enabled)
  EventRuleForSnapshotTagging:
    Type: AWS::Events::Rule
    Properties:
      Name: TagSnapshotCloudTrailRule
      Description: Backup trigger via CloudTrail for snapshot creation
      EventPattern:
        source:
          - "aws.ec2"
        detail-type:
          - "AWS API Call via CloudTrail"
        detail:
          eventSource:
            - "ec2.amazonaws.com"
          eventName:
            - "CreateSnapshot"
          responseElements:
            snapshotId:
              - exists: true
      Targets:
        - Arn: !GetAtt TagSnapshotFunction.Arn
          Id: "TagSnapshotCloudTrailTarget"

  PermissionForEventToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref TagSnapshotFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EventRuleForSnapshotCreation.Arn

  PermissionForCloudTrailEventToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref TagSnapshotFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EventRuleForSnapshotTagging.Arn

  ListStaleSnapshotsFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: ListStaleSnapshots
      Runtime: python3.12
      Handler: index.lambda_handler
      Role: !GetAtt SnapshotLambdaExecutionRole.Arn
      Timeout: 120
      Code:
        ZipFile: |
          import boto3
          from datetime import datetime, timezone

          ec2 = boto3.client('ec2')
          ec2_resource = boto3.resource('ec2')

          def get_instance_snapshot_mapping():
              mapping = {}
              try:
                  for instance in ec2_resource.instances.all():
                      for vol in instance.volumes.all():
                          mapping[vol.id] = instance.id
              except Exception as e:
                  print(f"Error building instance mapping: {e}")
              return mapping

          def lambda_handler(event, context):
              try:
                  snapshots = ec2.describe_snapshots(OwnerIds=['self'])['Snapshots']
                  instance_map = get_instance_snapshot_mapping()
                  stale_snapshots = []

                  for snapshot in snapshots:
                      snap_id = snapshot['SnapshotId']
                      start_time = snapshot['StartTime'].replace(tzinfo=timezone.utc)
                      age_days = (datetime.now(timezone.utc) - start_time).days
                      volume_id = snapshot.get('VolumeId', 'N/A')
                      delete_on = next((tag['Value'] for tag in snapshot.get('Tags', []) if tag['Key'] == 'DeleteOn'), 'Not Tagged')
                      associated_instance = instance_map.get(volume_id, 'N/A')

                      if age_days > 90:
                          stale_snapshots.append({
                              'SnapshotId': snap_id,
                              'StartTime': str(start_time),
                              'AgeInDays': age_days,
                              'VolumeId': volume_id,
                              'AssociatedInstance': associated_instance,
                              'DeleteOnTag': delete_on
                          })

                  print(f"Found {len(stale_snapshots)} stale snapshots (>90 days)")
                  for snap in stale_snapshots:
                      print(f"  - {snap}")
                      
                  return {
                      "statusCode": 200,
                      "body": stale_snapshots
                  }
                  
              except Exception as e:
                  print(f"Error listing stale snapshots: {str(e)}")
                  return {
                      "statusCode": 500,
                      "body": f"Error: {str(e)}"
                  }

Outputs:
  TagSnapshotFunctionArn:
    Description: ARN of the Tag Snapshot Lambda Function
    Value: !GetAtt TagSnapshotFunction.Arn
    
  ListStaleSnapshotsFunctionArn:
    Description: ARN of the List Stale Snapshots Lambda Function
    Value: !GetAtt ListStaleSnapshotsFunction.Arn
    
  EventRuleArn:
    Description: ARN of the EventBridge Rule
    Value: !GetAtt EventRuleForSnapshotCreation.Arn
