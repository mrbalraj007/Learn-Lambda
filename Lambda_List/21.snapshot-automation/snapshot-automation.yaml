AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Automatically tag EBS snapshots with 90-day retention and list stale snapshots.

Parameters:
  RetentionDays:
    Type: Number
    Default: 90
    Description: Number of days to keep snapshots before considering for deletion.

Resources:

  SnapshotLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: SnapshotLambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
            Action: sts:AssumeRole
      Policies:
        - PolicyName: SnapshotLambdaPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ec2:CreateTags
                  - ec2:DescribeSnapshots
                  - ec2:DescribeVolumes
                  - ec2:DescribeInstances
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  TagSnapshotFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: TagSnapshotOnCreate
      Runtime: python3.12
      Handler: index.lambda_handler
      Role: !GetAtt SnapshotLambdaExecutionRole.Arn
      Timeout: 60
      Environment:
        Variables:
          RETENTION_DAYS: !Ref RetentionDays
      Code:
        ZipFile: |
          import boto3
          import json
          import os
          from datetime import datetime, timedelta

          ec2 = boto3.client('ec2')

          def lambda_handler(event, context):
              print(f"Received event: {json.dumps(event, default=str)}")
              
              try:
                  snapshot_id = None
                  event_source = "unknown"
                  
                  # Enhanced event parsing for different sources
                  if 'detail' in event:
                      detail = event['detail']
                      event_source = event.get('source', 'unknown')
                      
                      # AWS Backup snapshot completion - multiple patterns
                      if 'resource-arn' in detail and 'snap-' in str(detail.get('resource-arn', '')):
                          resource_arn = detail['resource-arn']
                          snapshot_id = resource_arn.split('/')[-1] if '/' in resource_arn else resource_arn.split(':')[-1]
                          event_source = "aws.backup"
                      
                      # AWS Backup with different field name
                      elif 'resourceArn' in detail and 'snap-' in str(detail.get('resourceArn', '')):
                          resource_arn = detail['resourceArn']
                          snapshot_id = resource_arn.split('/')[-1] if '/' in resource_arn else resource_arn.split(':')[-1]
                          event_source = "aws.backup"
                      
                      # AWS Backup recovery point ARN
                      elif 'recoveryPointArn' in detail and 'snap-' in str(detail.get('recoveryPointArn', '')):
                          recovery_arn = detail['recoveryPointArn']
                          snapshot_id = recovery_arn.split('/')[-1] if '/' in recovery_arn else recovery_arn.split(':')[-1]
                          event_source = "aws.backup"
                      
                      # CloudTrail CreateSnapshot API call
                      elif 'responseElements' in detail and 'snapshotId' in detail['responseElements']:
                          snapshot_id = detail['responseElements']['snapshotId']
                          event_source = "aws.ec2.cloudtrail"
                      
                      # Direct EC2 snapshot state change events
                      elif 'snapshot-id' in detail:
                          snapshot_id = detail['snapshot-id']
                          event_source = "aws.ec2"
                      
                      # EventBridge EC2 events with resources array
                      elif 'resources' in detail and detail['resources']:
                          for resource in detail['resources']:
                              if 'snap-' in resource:
                                  snapshot_id = resource.split('/')[-1] if '/' in resource else resource
                                  event_source = "aws.ec2"
                                  break
                      
                      # AWS Backup job details with backup job ID - need to find the snapshot
                      elif 'backupJobId' in detail:
                          print(f"AWS Backup job detected: {detail.get('backupJobId')}")
                          # This might require additional logic to find the created snapshot
                          event_source = "aws.backup.job"
                  
                  # Handle direct invocation with snapshot ID
                  elif 'snapshot_id' in event:
                      snapshot_id = event['snapshot_id']
                      event_source = "manual"
                  
                  # Handle records format (if coming through SQS/SNS)
                  elif 'Records' in event:
                      for record in event['Records']:
                          if 'body' in record:
                              body = json.loads(record['body']) if isinstance(record['body'], str) else record['body']
                              if 'detail' in body and 'snapshot-id' in body['detail']:
                                  snapshot_id = body['detail']['snapshot-id']
                                  event_source = "sqs/sns"
                                  break
                  
                  if not snapshot_id:
                      print("Could not extract snapshot ID from event")
                      print(f"Event source: {event.get('source', 'unknown')}")
                      print(f"Event keys: {list(event.keys())}")
                      if 'detail' in event:
                          print(f"Detail keys: {list(event['detail'].keys())}")
                          print(f"Detail content: {json.dumps(event['detail'], default=str)}")
                      
                      # If this is a backup job completion, try to find recent untagged snapshots
                      if event.get('source') == 'aws.backup' and 'detail' in event:
                          return tag_recent_untagged_snapshots()
                      
                      return {"statusCode": 400, "body": "No snapshot ID found"}
                  
                  # Clean snapshot ID (remove any prefixes)
                  if 'snap-' not in snapshot_id:
                      print(f"Invalid snapshot ID format: {snapshot_id}")
                      return {"statusCode": 400, "body": "Invalid snapshot ID format"}
                  
                  print(f"Processing snapshot: {snapshot_id} from source: {event_source}")
                  
                  return tag_snapshot(snapshot_id, event_source)
                  
              except Exception as e:
                  print(f"Error processing event: {str(e)}")
                  print(f"Full event: {json.dumps(event, default=str)}")
                  return {
                      "statusCode": 500,
                      "body": f"Error: {str(e)}"
                  }

          def tag_snapshot(snapshot_id, event_source):
              try:
                  # Verify snapshot exists before tagging
                  snapshots = ec2.describe_snapshots(SnapshotIds=[snapshot_id])['Snapshots']
                  if not snapshots:
                      print(f"Snapshot {snapshot_id} not found")
                      return {"statusCode": 404, "body": "Snapshot not found"}
                  
                  snapshot = snapshots[0]
                  
                  # Check if already tagged
                  existing_tags = {tag['Key']: tag['Value'] for tag in snapshot.get('Tags', [])}
                  if 'AutoTagged' in existing_tags:
                      print(f"Snapshot {snapshot_id} already auto-tagged")
                      return {"statusCode": 200, "body": "Snapshot already tagged"}
                  
                  # Get retention days from environment variable
                  retention_days = int(os.environ.get('RETENTION_DAYS', 90))
                  delete_on = (datetime.utcnow() + timedelta(days=retention_days)).strftime('%Y-%m-%d')
                  
                  # Tag the snapshot
                  response = ec2.create_tags(
                      Resources=[snapshot_id],
                      Tags=[
                          {'Key': 'DeleteOn', 'Value': delete_on},
                          {'Key': 'Retention', 'Value': f'{retention_days}days'},
                          {'Key': 'AutoTagged', 'Value': 'true'},
                          {'Key': 'TaggedBy', 'Value': 'Lambda-AutoTagger'},
                          {'Key': 'Source', 'Value': event_source}
                      ]
                  )
                  
                  print(f"Successfully tagged snapshot {snapshot_id} for deletion on {delete_on}")
                  return {
                      "statusCode": 200,
                      "body": f"Snapshot {snapshot_id} tagged for deletion on {delete_on}"
                  }
                  
              except Exception as e:
                  print(f"Error tagging snapshot {snapshot_id}: {str(e)}")
                  return {"statusCode": 500, "body": f"Error tagging snapshot: {str(e)}"}

          def tag_recent_untagged_snapshots():
              """Fallback function to tag recent untagged snapshots from AWS Backup"""
              try:
                  print("Searching for recent untagged snapshots...")
                  
                  # Get snapshots from last 10 minutes
                  snapshots = ec2.describe_snapshots(
                      OwnerIds=['self'],
                      Filters=[
                          {
                              'Name': 'start-time',
                              'Values': [(datetime.utcnow() - timedelta(minutes=10)).strftime('%Y-%m-%dT%H:%M:%S.000Z')]
                          }
                      ]
                  )['Snapshots']
                  
                  tagged_count = 0
                  for snapshot in snapshots:
                      snapshot_id = snapshot['SnapshotId']
                      existing_tags = {tag['Key']: tag['Value'] for tag in snapshot.get('Tags', [])}
                      
                      # Skip if already auto-tagged
                      if 'AutoTagged' in existing_tags:
                          continue
                      
                      # Tag the snapshot
                      result = tag_snapshot(snapshot_id, "aws.backup.fallback")
                      if result['statusCode'] == 200:
                          tagged_count += 1
                  
                  print(f"Tagged {tagged_count} recent untagged snapshots")
                  return {
                      "statusCode": 200,
                      "body": f"Tagged {tagged_count} recent untagged snapshots"
                  }
                  
              except Exception as e:
                  print(f"Error in fallback tagging: {str(e)}")
                  return {"statusCode": 500, "body": f"Fallback tagging error: {str(e)}"}

  # Primary EventBridge rule for EBS snapshot state changes
  EventRuleForSnapshotCreation:
    Type: AWS::Events::Rule
    Properties:
      Name: TagSnapshotOnCreateRule
      Description: Trigger Lambda when EBS snapshot is created
      EventPattern:
        source:
          - "aws.ec2"
        detail-type:
          - "EBS Snapshot Notification"
        detail:
          state:
            - "completed"
      Targets:
        - Arn: !GetAtt TagSnapshotFunction.Arn
          Id: "TagSnapshotFunctionTarget"

  # Enhanced AWS Backup job completion rule
  EventRuleForBackupJobCompletion:
    Type: AWS::Events::Rule
    Properties:
      Name: TagSnapshotBackupJobRule
      Description: Trigger Lambda when AWS Backup job creates snapshot
      EventPattern:
        source:
          - "aws.backup"
        detail-type:
          - "Backup Job State Change"
        detail:
          state:
            - "COMPLETED"
      Targets:
        - Arn: !GetAtt TagSnapshotFunction.Arn
          Id: "TagSnapshotBackupTarget"

  # Additional rule for AWS Backup recovery point events
  EventRuleForBackupRecoveryPoint:
    Type: AWS::Events::Rule
    Properties:
      Name: TagSnapshotBackupRecoveryRule
      Description: Trigger Lambda when AWS Backup creates recovery point
      EventPattern:
        source:
          - "aws.backup"
        detail-type:
          - "Recovery Point State Change"
        detail:
          state:
            - "COMPLETED"
      Targets:
        - Arn: !GetAtt TagSnapshotFunction.Arn
          Id: "TagSnapshotRecoveryTarget"

  # Additional rule for EC2 instance backup events
  EventRuleForEC2SnapshotEvents:
    Type: AWS::Events::Rule
    Properties:
      Name: TagSnapshotEC2EventsRule
      Description: Catch all EC2 snapshot related events
      EventPattern:
        source:
          - "aws.ec2"
        detail-type:
          - "AWS API Call via CloudTrail"
        detail:
          eventSource:
            - "ec2.amazonaws.com"
          eventName:
            - "CreateSnapshot"
            - "CopySnapshot"
      Targets:
        - Arn: !GetAtt TagSnapshotFunction.Arn
          Id: "TagSnapshotEC2EventsTarget"

  # Backup EventBridge rule for CloudTrail events (if CloudTrail is enabled)
  EventRuleForSnapshotTagging:
    Type: AWS::Events::Rule
    Properties:
      Name: TagSnapshotCloudTrailRule
      Description: Backup trigger via CloudTrail for snapshot creation
      EventPattern:
        source:
          - "aws.ec2"
        detail-type:
          - "AWS API Call via CloudTrail"
        detail:
          eventSource:
            - "ec2.amazonaws.com"
          eventName:
            - "CreateSnapshot"
          responseElements:
            snapshotId:
              - exists: true
      Targets:
        - Arn: !GetAtt TagSnapshotFunction.Arn
          Id: "TagSnapshotCloudTrailTarget"

  # Scheduled function to catch any missed snapshots
  ScheduledSnapshotTagger:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: ScheduledSnapshotTagger
      Runtime: python3.12
      Handler: index.lambda_handler
      Role: !GetAtt SnapshotLambdaExecutionRole.Arn
      Timeout: 300
      Environment:
        Variables:
          RETENTION_DAYS: !Ref RetentionDays
      Code:
        ZipFile: |
          import boto3
          import os
          from datetime import datetime, timedelta

          ec2 = boto3.client('ec2')

          def lambda_handler(event, context):
              try:
                  print("Running scheduled snapshot tagging...")
                  
                  # Get all untagged snapshots from last 24 hours
                  since_time = (datetime.utcnow() - timedelta(hours=24)).strftime('%Y-%m-%dT%H:%M:%S.000Z')
                  
                  snapshots = ec2.describe_snapshots(
                      OwnerIds=['self'],
                      Filters=[
                          {
                              'Name': 'start-time',
                              'Values': [since_time]
                          }
                      ]
                  )['Snapshots']
                  
                  tagged_count = 0
                  for snapshot in snapshots:
                      snapshot_id = snapshot['SnapshotId']
                      existing_tags = {tag['Key']: tag['Value'] for tag in snapshot.get('Tags', [])}
                      
                      # Skip if already auto-tagged
                      if 'AutoTagged' in existing_tags:
                          continue
                      
                      print(f"Tagging missed snapshot: {snapshot_id}")
                      
                      retention_days = int(os.environ.get('RETENTION_DAYS', 90))
                      delete_on = (datetime.utcnow() + timedelta(days=retention_days)).strftime('%Y-%m-%d')
                      
                      ec2.create_tags(
                          Resources=[snapshot_id],
                          Tags=[
                              {'Key': 'DeleteOn', 'Value': delete_on},
                              {'Key': 'Retention', 'Value': f'{retention_days}days'},
                              {'Key': 'AutoTagged', 'Value': 'true'},
                              {'Key': 'TaggedBy', 'Value': 'Lambda-Scheduled'},
                              {'Key': 'Source', 'Value': 'scheduled-fallback'}
                          ]
                      )
                      tagged_count += 1
                  
                  print(f"Scheduled tagging completed. Tagged {tagged_count} snapshots.")
                  return {
                      "statusCode": 200,
                      "body": f"Tagged {tagged_count} missed snapshots"
                  }
                  
              except Exception as e:
                  print(f"Error in scheduled tagging: {str(e)}")
                  return {"statusCode": 500, "body": f"Error: {str(e)}"}

  # Schedule the tagger to run every hour
  ScheduledTaggingRule:
    Type: AWS::Events::Rule
    Properties:
      Name: ScheduledSnapshotTaggingRule
      Description: Run snapshot tagging every hour to catch missed snapshots
      ScheduleExpression: "rate(1 hour)"
      Targets:
        - Arn: !GetAtt ScheduledSnapshotTagger.Arn
          Id: "ScheduledSnapshotTaggerTarget"

  PermissionForEventToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref TagSnapshotFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EventRuleForSnapshotCreation.Arn

  PermissionForBackupEventToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref TagSnapshotFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EventRuleForBackupJobCompletion.Arn

  PermissionForEC2EventToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref TagSnapshotFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EventRuleForEC2SnapshotEvents.Arn

  PermissionForCloudTrailEventToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref TagSnapshotFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EventRuleForSnapshotTagging.Arn

  PermissionForScheduledEventToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ScheduledSnapshotTagger
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt ScheduledTaggingRule.Arn

  PermissionForBackupRecoveryEventToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref TagSnapshotFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EventRuleForBackupRecoveryPoint.Arn

  ListStaleSnapshotsFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: ListStaleSnapshots
      Runtime: python3.12
      Handler: index.lambda_handler
      Role: !GetAtt SnapshotLambdaExecutionRole.Arn
      Timeout: 120
      Environment:
        Variables:
          RETENTION_DAYS: !Ref RetentionDays
      Code:
        ZipFile: |
          import boto3
          import os
          from datetime import datetime, timezone

          ec2 = boto3.client('ec2')
          ec2_resource = boto3.resource('ec2')

          def get_instance_snapshot_mapping():
              mapping = {}
              try:
                  for instance in ec2_resource.instances.all():
                      for vol in instance.volumes.all():
                          mapping[vol.id] = instance.id
              except Exception as e:
                  print(f"Error building instance mapping: {e}")
              return mapping

          def lambda_handler(event, context):
              try:
                  retention_days = int(os.environ.get('RETENTION_DAYS', 90))
                  print(f"Looking for snapshots older than {retention_days} days...")
                  
                  snapshots = ec2.describe_snapshots(OwnerIds=['self'])['Snapshots']
                  instance_map = get_instance_snapshot_mapping()
                  stale_snapshots = []

                  for snapshot in snapshots:
                      snap_id = snapshot['SnapshotId']
                      start_time = snapshot['StartTime'].replace(tzinfo=timezone.utc)
                      age_days = (datetime.now(timezone.utc) - start_time).days
                      volume_id = snapshot.get('VolumeId', 'N/A')
                      delete_on = next((tag['Value'] for tag in snapshot.get('Tags', []) if tag['Key'] == 'DeleteOn'), 'Not Tagged')
                      associated_instance = instance_map.get(volume_id, 'N/A')

                      if age_days > retention_days:
                          stale_snapshots.append({
                              'SnapshotId': snap_id,
                              'StartTime': str(start_time),
                              'AgeInDays': age_days,
                              'VolumeId': volume_id,
                              'AssociatedInstance': associated_instance,
                              'DeleteOnTag': delete_on
                          })

                  print(f"Found {len(stale_snapshots)} stale snapshots (>{retention_days} days)")
                  for snap in stale_snapshots:
                      print(f"  - {snap}")
                      
                  return {
                      "statusCode": 200,
                      "body": stale_snapshots
                  }
                  
              except Exception as e:
                  print(f"Error listing stale snapshots: {str(e)}")
                  return {
                      "statusCode": 500,
                      "body": f"Error: {str(e)}"
                  }

Outputs:
  TagSnapshotFunctionArn:
    Description: ARN of the Tag Snapshot Lambda Function
    Value: !GetAtt TagSnapshotFunction.Arn
    
  ListStaleSnapshotsFunctionArn:
    Description: ARN of the List Stale Snapshots Lambda Function
    Value: !GetAtt ListStaleSnapshotsFunction.Arn
    
  EventRuleArn:
    Description: ARN of the EventBridge Rule
    Value: !GetAtt EventRuleForSnapshotCreation.Arn

  BackupEventRuleArn:
    Description: ARN of the AWS Backup EventBridge Rule
    Value: !GetAtt EventRuleForBackupJobCompletion.Arn

  ScheduledSnapshotTaggerArn:
    Description: ARN of the Scheduled Snapshot Tagger Lambda Function
    Value: !GetAtt ScheduledSnapshotTagger.Arn
