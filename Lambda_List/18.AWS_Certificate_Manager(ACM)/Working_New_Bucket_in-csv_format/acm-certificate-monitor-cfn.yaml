AWSTemplateFormatVersion: '2010-09-09'
Description: 'Infrastructure for ACM Certificate monitoring with weekly reporting'

Parameters:
  EmailAddress:
    Type: String
    Description: Email address to receive notifications
    AllowedPattern: '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'

Resources:
  ACMCertificateMonitorBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'acm-certificate-monitor-${AWS::AccountId}'
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldReports
            Status: Enabled
            ExpirationInDays: 90

  ACMCertificateMonitorSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: ACM Certificate Monitor
      TopicName: acm-certificate-monitor

  ACMCertificateMonitorSNSSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: email
      Endpoint: !Ref EmailAddress
      TopicArn: !Ref ACMCertificateMonitorSNSTopic

  ACMCertificateMonitorLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: ACMCertificateMonitorPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - acm:ListCertificates
                  - acm:DescribeCertificate
                Resource: '*'
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource: !Sub '${ACMCertificateMonitorBucket.Arn}/*'
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Ref ACMCertificateMonitorSNSTopic

  ACMCertificateMonitorLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: acm-certificate-monitor
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt ACMCertificateMonitorLambdaRole.Arn
      Timeout: 60
      Environment:
        Variables:
          S3_BUCKET_NAME: !Ref ACMCertificateMonitorBucket
          SNS_TOPIC_ARN: !Ref ACMCertificateMonitorSNSTopic
      Code:
        ZipFile: !Sub |
          import boto3
          import csv
          import datetime
          import os
          from io import StringIO

          def lambda_handler(event, context):
              # Initialize boto3 clients
              acm_client = boto3.client('acm')
              s3_client = boto3.client('s3')
              sns_client = boto3.client('sns')
              
              # Get environment variables
              bucket_name = os.environ['S3_BUCKET_NAME']
              sns_topic_arn = os.environ['SNS_TOPIC_ARN']
              
              # Get list of certificates
              certificates = []
              paginator = acm_client.get_paginator('list_certificates')
              for page in paginator.paginate():
                  certificates.extend(page['CertificateSummaryList'])
              
              # Prepare CSV data
              csv_data = StringIO()
              csv_writer = csv.writer(csv_data)
              csv_writer.writerow(['Certificate ARN', 'Domain Name', 'Status', 'Type', 'Issued At', 'Not Before', 'Not After', 'Days to Expiry'])
              
              # Current time for calculation
              now = datetime.datetime.now(datetime.timezone.utc)
              
              # Collect certificate details
              for cert in certificates:
                  cert_details = acm_client.describe_certificate(CertificateArn=cert['CertificateArn'])
                  cert_detail = cert_details['Certificate']
                  
                  domain_name = cert_detail.get('DomainName', 'N/A')
                  status = cert_detail.get('Status', 'N/A')
                  cert_type = cert_detail.get('Type', 'N/A')
                  issued_at = cert_detail.get('IssuedAt', 'N/A')
                  not_before = cert_detail.get('NotBefore', 'N/A')
                  not_after = cert_detail.get('NotAfter', 'N/A')
                  
                  # Calculate days to expiry if NotAfter date exists
                  days_to_expiry = 'N/A'
                  if not_after != 'N/A':
                      days_to_expiry = (not_after - now).days
                  
                  csv_writer.writerow([
                      cert['CertificateArn'],
                      domain_name,
                      status,
                      cert_type,
                      issued_at.strftime('%Y-%m-%d') if isinstance(issued_at, datetime.datetime) else issued_at,
                      not_before.strftime('%Y-%m-%d') if isinstance(not_before, datetime.datetime) else not_before,
                      not_after.strftime('%Y-%m-%d') if isinstance(not_after, datetime.datetime) else not_after,
                      days_to_expiry
                  ])
              
              # Generate filename with date and time
              file_name = f"acm_certificates_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
              
              # Upload to S3
              s3_client.put_object(
                  Bucket=bucket_name,
                  Key=file_name,
                  Body=csv_data.getvalue(),
                  ContentType='text/csv'
              )
              
              # Send SNS notification
              message = f"ACM Certificate report has been generated and saved to s3://{bucket_name}/{file_name}"
              sns_client.publish(
                  TopicArn=sns_topic_arn,
                  Message=message,
                  Subject="Weekly ACM Certificate Report"
              )
              
              return {
                  'statusCode': 200,
                  'body': f"Report generated successfully and saved to {file_name}"
              }

  ACMCertificateMonitorScheduleRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Weekly trigger for ACM Certificate Monitor Lambda
      ScheduleExpression: 'cron(0 0 ? * MON *)'  # Run every Monday at midnight
      State: ENABLED
      Targets:
        - Arn: !GetAtt ACMCertificateMonitorLambda.Arn
          Id: ACMCertificateMonitorLambdaTarget

  ACMCertificateMonitorLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ACMCertificateMonitorLambda
      Principal: events.amazonaws.com
      SourceArn: !GetAtt ACMCertificateMonitorScheduleRule.Arn

Outputs:
  BucketName:
    Description: Name of the S3 bucket storing ACM certificate reports
    Value: !Ref ACMCertificateMonitorBucket
  LambdaFunction:
    Description: Name of the Lambda function
    Value: !Ref ACMCertificateMonitorLambda
  SNSTopic:
    Description: ARN of the SNS topic
    Value: !Ref ACMCertificateMonitorSNSTopic

