import boto3
import csv
import datetime
import os
from io import StringIO
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.application import MIMEApplication

def generate_html_report(certificates_data, now):
    """Generate HTML report with color coding for certificate expiry status"""
    html = """
    <!DOCTYPE html>
    <html>
    <head>
        <style>
            body { font-family: Arial, sans-serif; }
            h1 { color: #0066cc; text-align: center; margin: 20px 0; }
            table { width: 100%; border-collapse: collapse; margin: 25px 0; }
            th { background-color: #0066cc; color: white; text-align: left; padding: 12px; }
            td { padding: 10px; border-bottom: 1px solid #ddd; }
            tr:nth-child(even) { background-color: #f2f2f2; }
            tr:hover { background-color: #e6f2ff; }
            .expired { background-color: #ffcccc; color: #cc0000; font-weight: bold; }
            .expiring-soon { background-color: #fff4cc; color: #806600; font-weight: bold; }
            .valid { background-color: #ccffcc; color: #006600; }
            .timestamp { text-align: center; font-size: 0.8em; color: #666; margin-bottom: 20px; }
            .summary { margin: 20px 0; padding: 15px; border: 1px solid #ddd; border-radius: 5px; }
            .summary h3 { margin-top: 0; color: #0066cc; }
        </style>
    </head>
    <body>
        <h1>ACM Certificate Expiration Report</h1>
        <div class="timestamp">Generated on: """ + datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC') + """</div>
        
        <div class="summary">
            <h3>Summary</h3>
            <p>Total certificates: <strong>{total}</strong></p>
            <p>Expired certificates: <strong style="color: #cc0000;">{expired}</strong></p>
            <p>Expiring within 30 days: <strong style="color: #806600;">{expiring_soon}</strong></p>
            <p>Valid certificates: <strong style="color: #006600;">{valid}</strong></p>
        </div>
        
        <table>
            <tr>
                <th>Domain Name</th>
                <th>Status</th>
                <th>Type</th>
                <th>Issued At</th>
                <th>Expiry Date</th>
                <th>Days to Expiry</th>
            </tr>
    """

    total_certs = 0
    expired_certs = 0
    expiring_soon_certs = 0
    valid_certs = 0

    # Process each certificate for the HTML table
    for cert in certificates_data:
        total_certs += 1
        days_to_expiry = cert['days_to_expiry']
        
        # Determine row class based on expiry
        if days_to_expiry == 'N/A':
            row_class = ""
        elif isinstance(days_to_expiry, int):
            if days_to_expiry < 0:
                row_class = "expired"
                expired_certs += 1
            elif days_to_expiry <= 30:
                row_class = "expiring-soon"
                expiring_soon_certs += 1
            else:
                row_class = "valid"
                valid_certs += 1
        else:
            row_class = ""

        # Format the expiry date and days to expiry for display
        expiry_display = cert['not_after'] if cert['not_after'] != 'N/A' else 'N/A'
        days_display = f"{days_to_expiry} days" if isinstance(days_to_expiry, int) else days_to_expiry
        
        html += f"""
            <tr class="{row_class}">
                <td>{cert['domain_name']}</td>
                <td>{cert['status']}</td>
                <td>{cert['cert_type']}</td>
                <td>{cert['issued_at']}</td>
                <td>{expiry_display}</td>
                <td>{days_display}</td>
            </tr>
        """
    
    # Complete the HTML
    html = html.replace("{total}", str(total_certs))
    html = html.replace("{expired}", str(expired_certs))
    html = html.replace("{expiring_soon}", str(expiring_soon_certs))
    html = html.replace("{valid}", str(valid_certs))
    
    html += """
        </table>
        <div style="margin-top: 30px; font-size: 0.8em; color: #666; text-align: center;">
            <p>This report is automatically generated by the ACM Certificate Monitor Lambda function.</p>
        </div>
    </body>
    </html>
    """
    return html

def lambda_handler(event, context):
    # Initialize boto3 clients
    acm_client = boto3.client('acm')
    s3_client = boto3.client('s3')
    sns_client = boto3.client('sns')
    ses_client = boto3.client('ses')
    
    # Get environment variables
    bucket_name = os.environ['S3_BUCKET_NAME']
    sns_topic_arn = os.environ['SNS_TOPIC_ARN']
    email_recipient = os.environ['EMAIL_RECIPIENT']
    
    # Get list of certificates
    certificates = []
    paginator = acm_client.get_paginator('list_certificates')
    for page in paginator.paginate():
        certificates.extend(page['CertificateSummaryList'])
    
    # Prepare CSV data
    csv_data = StringIO()
    csv_writer = csv.writer(csv_data)
    csv_writer.writerow(['Certificate ARN', 'Domain Name', 'Status', 'Type', 'Issued At', 'Not Before', 'Not After', 'Days to Expiry'])
    
    # Current time for calculation
    now = datetime.datetime.now(datetime.timezone.utc)
    
    # Collect certificate details
    certificates_data = []
    for cert in certificates:
        cert_details = acm_client.describe_certificate(CertificateArn=cert['CertificateArn'])
        cert_detail = cert_details['Certificate']
        
        domain_name = cert_detail.get('DomainName', 'N/A')
        status = cert_detail.get('Status', 'N/A')
        cert_type = cert_detail.get('Type', 'N/A')
        issued_at = cert_detail.get('IssuedAt', 'N/A')
        not_before = cert_detail.get('NotBefore', 'N/A')
        not_after = cert_detail.get('NotAfter', 'N/A')
        
        # Calculate days to expiry if NotAfter date exists
        days_to_expiry = 'N/A'
        if not_after != 'N/A':
            days_to_expiry = (not_after - now).days
        
        # Format dates for CSV
        issued_at_str = issued_at.strftime('%Y-%m-%d') if isinstance(issued_at, datetime.datetime) else issued_at
        not_before_str = not_before.strftime('%Y-%m-%d') if isinstance(not_before, datetime.datetime) else not_before
        not_after_str = not_after.strftime('%Y-%m-%d') if isinstance(not_after, datetime.datetime) else not_after
        
        # Store for both CSV and HTML
        certificates_data.append({
            'cert_arn': cert['CertificateArn'],
            'domain_name': domain_name,
            'status': status,
            'cert_type': cert_type,
            'issued_at': issued_at_str,
            'not_before': not_before_str,
            'not_after': not_after_str,
            'days_to_expiry': days_to_expiry
        })
        
        # Write to CSV
        csv_writer.writerow([
            cert['CertificateArn'],
            domain_name,
            status,
            cert_type,
            issued_at_str,
            not_before_str,
            not_after_str,
            days_to_expiry
        ])
    
    # Get the CSV data
    csv_content = csv_data.getvalue()
    
    # Generate HTML report
    html_content = generate_html_report(certificates_data, now)
    
    # Generate filenames with date and time
    current_timestamp = datetime.datetime.now().strftime('%Y%m%d_%H%M%S')
    csv_file_name = f"acm_certificates_{current_timestamp}.csv"
    html_file_name = f"acm_certificates_{current_timestamp}.html"
    
    # Upload files to S3
    s3_client.put_object(
        Bucket=bucket_name,
        Key=csv_file_name,
        Body=csv_content,
        ContentType='text/csv'
    )
    
    s3_client.put_object(
        Bucket=bucket_name,
        Key=html_file_name,
        Body=html_content,
        ContentType='text/html'
    )
    
    # Prepare email with both CSV and HTML attachments using SES
    try:
        # Create a multipart message
        msg = MIMEMultipart()
        msg['Subject'] = "Weekly ACM Certificate Report"
        msg['From'] = "no-reply@aws.amazon.com"
        msg['To'] = email_recipient
        
        # Add HTML message body
        msg.attach(MIMEText(html_content, 'html'))
        
        # Add CSV attachment
        csv_attachment = MIMEApplication(csv_content, Name=csv_file_name)
        csv_attachment['Content-Disposition'] = f'attachment; filename="{csv_file_name}"'
        msg.attach(csv_attachment)
        
        # Add HTML attachment
        html_attachment = MIMEApplication(html_content.encode('utf-8'), Name=html_file_name)
        html_attachment['Content-Disposition'] = f'attachment; filename="{html_file_name}"'
        html_attachment['Content-Type'] = 'text/html; charset=utf-8'
        msg.attach(html_attachment)
        
        # Send email through SES
        ses_client.send_raw_email(
            Source="no-reply@aws.amazon.com",
            Destinations=[email_recipient],
            RawMessage={'Data': msg.as_string()}
        )
    except Exception as e:
        # Fallback to SNS if SES fails or isn't available
        message = (
            f"ACM Certificate reports have been generated and saved to S3:\n"
            f"- CSV: s3://{bucket_name}/{csv_file_name}\n"
            f"- HTML: s3://{bucket_name}/{html_file_name}\n\n"
            f"Error sending email with attachments: {str(e)}"
        )
        sns_client.publish(
            TopicArn=sns_topic_arn,
            Message=message,
            Subject="Weekly ACM Certificate Report"
        )
        print(f"Falling back to SNS due to SES error: {str(e)}")
    
    return {
        'statusCode': 200,
        'body': f"Reports generated successfully and saved to S3: {csv_file_name} and {html_file_name}"
    }

