AWSTemplateFormatVersion: '2010-09-09'
Description: 'Fully automated CloudFormation template for budget restriction with EC2 instance limitation'

Parameters:
  BudgetLimit:
    Type: Number
    Default: 100
    Description: The budget limit amount in USD

  BudgetName:
    Type: String
    Default: 'MonthlyBudget'
    Description: Name of the budget

  EmailAddress:
    Type: String
    Default: 'youremailID@gmail.com'
    Description: Email address to receive budget notifications

  TargetIAMRole:
    Type: String
    Default: 'EC2UserRestrictedRole'
    Description: The IAM role to which the restrictive policy will be applied

Resources:
  # Target IAM Role that will be restricted
  EC2UserRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Ref TargetIAMRole
      Description: 'Role for EC2 operations that will be restricted when budget thresholds are exceeded'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonEC2FullAccess'
      Policies:
        - PolicyName: 'EC2RunInstancesPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:RunInstances'
                  - 'ec2:CreateTags'
                  - 'ec2:DescribeInstances'
                  - 'ec2:StartInstances'
                  - 'ec2:StopInstances'
                  - 'ec2:TerminateInstances'
                Resource: '*'
      Path: '/'
      Tags:
        - Key: Purpose
          Value: BudgetRestrictedRole

  # Budget Action Role
  BudgetActionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: budgets.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'BudgetActionPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'iam:AttachRolePolicy'
                  - 'iam:DetachRolePolicy'
                Resource: !GetAtt EC2UserRole.Arn
              - Effect: 'Allow'
                Action:
                  - 'iam:AttachGroupPolicy'
                  - 'iam:AttachRolePolicy'
                  - 'iam:AttachUserPolicy'
                  - 'iam:CreatePolicy'
                  - 'iam:CreatePolicyVersion'
                  - 'iam:DeletePolicy'
                  - 'iam:DeletePolicyVersion'
                  - 'iam:DetachGroupPolicy' 
                  - 'iam:DetachRolePolicy'
                  - 'iam:DetachUserPolicy'
                  - 'iam:ListAttachedGroupPolicies'
                  - 'iam:ListAttachedRolePolicies'
                  - 'iam:ListAttachedUserPolicies'
                  - 'iam:ListPolicies'
                  - 'iam:ListPolicyVersions'
                  - 'iam:SetDefaultPolicyVersion'
                Resource: '*'
              - Effect: 'Allow'
                Action:
                  - 'ssm:GetParameters'
                  - 'ssm:GetParameter'
                Resource: '*'

  # EC2 Restriction Policy
  EC2RestrictPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Description: 'Restricts EC2 instance creation to only t3.micro instances'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Action:
              - 'ec2:RunInstances'
            Resource: 'arn:aws:ec2:*:*:instance/*'
            Condition:
              StringEquals:
                'ec2:InstanceType': 't3.micro'
          - Effect: 'Allow'
            Action: 'ec2:RunInstances'
            Resource:
              - 'arn:aws:ec2:*:*:volume/*'
              - 'arn:aws:ec2:*:*:network-interface/*'
              - 'arn:aws:ec2:*:*:subnet/*'
              - 'arn:aws:ec2:*:*:security-group/*'
              - 'arn:aws:ec2:*:*:key-pair/*'
              - 'arn:aws:ec2:*::image/*'
          - Effect: 'Deny'
            Action: 'ec2:RunInstances'
            Resource: 'arn:aws:ec2:*:*:instance/*'
            Condition:
              StringNotEquals:
                'ec2:InstanceType': 't3.micro'
          - Effect: 'Allow'
            Action:
              - 'ec2:Describe*'
              - 'ec2:Get*'
            Resource: '*'

  # Budget
  MonthlyBudget:
    Type: 'AWS::Budgets::Budget'
    Properties:
      Budget:
        BudgetName: !Ref BudgetName
        BudgetType: COST
        TimeUnit: MONTHLY
        BudgetLimit:
          Amount: !Ref BudgetLimit
          Unit: USD
      NotificationsWithSubscribers:
        - Notification:
            NotificationType: ACTUAL
            ComparisonOperator: GREATER_THAN
            Threshold: 80
          Subscribers:
            - SubscriptionType: EMAIL
              Address: !Ref EmailAddress
        - Notification:
            NotificationType: ACTUAL
            ComparisonOperator: GREATER_THAN
            Threshold: 100
          Subscribers:
            - SubscriptionType: EMAIL
              Address: !Ref EmailAddress

  # Lambda Execution Role
  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: 'BudgetActionManagement'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'budgets:CreateBudgetAction'
                  - 'budgets:DeleteBudgetAction'
                  - 'budgets:DescribeBudgetActions'
                  - 'budgets:UpdateBudgetAction'
                  - 'budgets:DescribeBudget'
                  - 'budgets:ViewBudget'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'iam:PassRole'
                Resource: !GetAtt BudgetActionRole.Arn

  # Lambda Function to Create Budget Action
  BudgetActionCreator:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: 'BudgetActionCreatorFunction'
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 300
      Code:
        ZipFile: |
          import boto3
          import json
          import cfnresponse
          import logging
          import time
          
          # Configure logging
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          
          def lambda_handler(event, context):
              logger.info(f"Received event: {json.dumps(event, default=str)}")
              
              try:
                  budgets_client = boto3.client('budgets')
                  
                  if event['RequestType'] == 'Create':
                      # Extract parameters from event
                      account_id = event['ResourceProperties']['AccountId']
                      budget_name = event['ResourceProperties']['BudgetName']
                      policy_arn = event['ResourceProperties']['PolicyArn']
                      execution_role_arn = event['ResourceProperties']['ExecutionRoleArn']
                      target_role_name = event['ResourceProperties']['TargetRoleName']
                      email_address = event['ResourceProperties']['EmailAddress']
                      
                      logger.info(f"Creating budget action for budget: {budget_name}")
                      logger.info(f"Account ID: {account_id}")
                      logger.info(f"Policy ARN: {policy_arn}")
                      logger.info(f"Execution Role ARN: {execution_role_arn}")
                      logger.info(f"Target Role Name: {target_role_name}")
                      
                      # Wait longer to ensure all resources are ready
                      logger.info("Waiting for resources to be ready...")
                      time.sleep(30)
                      
                      # Verify budget exists first
                      try:
                          budget_response = budgets_client.describe_budget(
                              AccountId=account_id,
                              BudgetName=budget_name
                          )
                          logger.info(f"Budget {budget_name} found successfully")
                          logger.info(f"Budget details: {json.dumps(budget_response, default=str)}")
                      except Exception as e:
                          logger.error(f"Budget {budget_name} not found: {str(e)}")
                          raise Exception(f"Budget {budget_name} not found: {str(e)}")
                      
                      # Check if budget action already exists
                      try:
                          existing_actions = budgets_client.describe_budget_actions(
                              AccountId=account_id,
                              BudgetName=budget_name
                          )
                          logger.info(f"Existing budget actions: {json.dumps(existing_actions, default=str)}")
                          
                          # If action already exists, use it
                          if existing_actions.get('Actions', []):
                              action_id = existing_actions['Actions'][0]['ActionId']
                              logger.info(f"Using existing budget action with ID: {action_id}")
                              cfnresponse.send(event, context, cfnresponse.SUCCESS, 
                                             {'ActionId': action_id}, action_id)
                              return
                      except Exception as e:
                          logger.info(f"No existing budget actions found: {str(e)}")
                      
                      # Create budget action with retry logic
                      max_retries = 3
                      retry_count = 0
                      
                      while retry_count < max_retries:
                          try:
                              logger.info(f"Attempting to create budget action (attempt {retry_count + 1})")
                              
                              # Create the budget action
                              action_request = {
                                  'AccountId': account_id,
                                  'BudgetName': budget_name,
                                  'NotificationType': 'ACTUAL',
                                  'ActionType': 'APPLY_IAM_POLICY',
                                  'ActionThreshold': {
                                      'ActionThresholdValue': 100.0,
                                      'ActionThresholdType': 'PERCENTAGE'
                                  },
                                  'Definition': {
                                      'IamActionDefinition': {
                                          'PolicyArn': policy_arn,
                                          'Roles': [target_role_name]
                                      }
                                  },
                                  'ExecutionRoleArn': execution_role_arn,
                                  'ApprovalModel': 'AUTOMATIC'
                              }
                              
                              logger.info(f"Budget action request: {json.dumps(action_request, default=str)}")
                              
                              response = budgets_client.create_budget_action(**action_request)
                              
                              action_id = response['ActionId']
                              logger.info(f"Budget action created successfully with ID: {action_id}")
                              
                              cfnresponse.send(event, context, cfnresponse.SUCCESS, 
                                             {'ActionId': action_id}, action_id)
                              return
                              
                          except Exception as e:
                              logger.error(f"Attempt {retry_count + 1} failed: {str(e)}")
                              logger.error(f"Error type: {type(e).__name__}")
                              
                              # Check if it's a specific error we can handle
                              error_code = getattr(e, 'response', {}).get('Error', {}).get('Code', 'Unknown')
                              logger.error(f"Error code: {error_code}")
                              
                              retry_count += 1
                              if retry_count < max_retries:
                                  wait_time = 60 * retry_count  # Exponential backoff
                                  logger.info(f"Retrying in {wait_time} seconds...")
                                  time.sleep(wait_time)
                              else:
                                  logger.error(f"All retry attempts failed")
                                  raise e
                      
                  elif event['RequestType'] == 'Delete':
                      # Clean up budget action on stack deletion
                      account_id = event['ResourceProperties']['AccountId']
                      budget_name = event['ResourceProperties']['BudgetName']
                      action_id = event['PhysicalResourceId']
                      
                      logger.info(f"Deleting budget action: {action_id}")
                      
                      try:
                          budgets_client.delete_budget_action(
                              AccountId=account_id,
                              BudgetName=budget_name,
                              ActionId=action_id
                          )
                          logger.info(f"Budget action {action_id} deleted successfully")
                      except Exception as e:
                          logger.warning(f"Error deleting budget action: {e}")
                          # Continue with success even if deletion fails
                      
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                      
                  else:
                      # Update not supported, just return success
                      logger.info("Update operation - returning success")
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                      
              except Exception as e:
                  logger.error(f"Lambda function failed: {str(e)}")
                  logger.error(f"Error type: {type(e).__name__}")
                  import traceback
                  logger.error(f"Traceback: {traceback.format_exc()}")
                  
                  # Send more detailed error information
                  error_message = f"Lambda function failed: {str(e)}"
                  if hasattr(e, 'response'):
                      error_message += f" - AWS Error: {e.response.get('Error', {})}"
                  
                  cfnresponse.send(event, context, cfnresponse.FAILED, 
                                 {'Error': error_message})

  # Custom Resource to Create Budget Action
  BudgetActionResource:
    Type: 'AWS::CloudFormation::CustomResource'
    DependsOn: 
      - MonthlyBudget
      - EC2RestrictPolicy
      - BudgetActionRole
      - EC2UserRole
    Properties:
      ServiceToken: !GetAtt BudgetActionCreator.Arn
      AccountId: !Ref 'AWS::AccountId'
      BudgetName: !Ref BudgetName
      PolicyArn: !Ref EC2RestrictPolicy
      ExecutionRoleArn: !GetAtt BudgetActionRole.Arn
      TargetRoleName: !Ref TargetIAMRole
      EmailAddress: !Ref EmailAddress

Outputs:
  BudgetName:
    Description: 'Name of the created budget'
    Value: !Ref BudgetName

  BudgetLimit:
    Description: 'Budget limit in USD'
    Value: !Ref BudgetLimit

  RestrictedPolicyArn:
    Description: 'ARN of the policy restricting EC2 instances'
    Value: !Ref EC2RestrictPolicy

  BudgetActionRoleArn:
    Description: 'ARN of the role used for budget actions'
    Value: !GetAtt BudgetActionRole.Arn

  EC2UserRoleArn:
    Description: 'ARN of the EC2 user role that will be restricted'
    Value: !GetAtt EC2UserRole.Arn

  BudgetActionId:
    Description: 'ID of the created budget action'
    Value: !Ref BudgetActionResource

  DeploymentStatus:
    Description: 'Deployment status'
    Value: 'Fully automated budget restriction deployed successfully'
