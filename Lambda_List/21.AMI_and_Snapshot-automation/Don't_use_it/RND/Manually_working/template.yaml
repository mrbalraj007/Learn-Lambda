AWSTemplateFormatVersion: '2010-09-09'
Description: Automatically tag snapshots with Retention and DeleteOn upon creation

Parameters:
  RetentionDays:
    Type: Number
    Default: 90
    Description: Retention period in days for snapshot deletion tag

Resources:

  SnapshotTaggerLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: SnapshotTaggerLambdaRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SnapshotTagPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:CreateTags
                  - ec2:DescribeSnapshots
                  - rds:AddTagsToResource
                  - rds:DescribeDBSnapshots
                  - fsx:TagResource
                  - fsx:DescribeBackups
                  - backup:TagResource
                  - backup:ListRecoveryPointsByBackupVault
                Resource: "*"

  SnapshotTaggerLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: SnapshotTaggerFunction
      Handler: index.lambda_handler
      Role: !GetAtt SnapshotTaggerLambdaRole.Arn
      Runtime: python3.11
      Timeout: 60
      Code:
        ZipFile: |
          import boto3
          import os
          import json
          from datetime import datetime, timedelta

          def lambda_handler(event, context):
              print("Event received:", json.dumps(event))
              
              retention_days = int(os.environ.get("RETENTION_DAYS", 90))
              delete_on = (datetime.utcnow() + timedelta(days=retention_days)).strftime('%Y-%m-%d')
              
              snapshot_id = None
              resource_arn = None

              if 'detail' in event:
                  detail = event['detail']
                  service = detail.get('service')
                  
                  # EBS Snapshots
                  if detail.get('eventName') == 'CreateSnapshot':
                      snapshot_id = detail['responseElements']['snapshotId']
                      ec2 = boto3.client('ec2')
                      ec2.create_tags(
                          Resources=[snapshot_id],
                          Tags=[
                              {'Key': 'Retention', 'Value': f'{retention_days}days'},
                              {'Key': 'DeleteOn', 'Value': delete_on}
                          ]
                      )
                  
                  # AWS Backup Resource ARN
                  elif detail.get('eventName') == 'StartBackupJob':
                      resource_arn = detail['requestParameters'].get('resourceArn')
                      backup = boto3.client('backup')
                      if resource_arn:
                          backup.tag_resource(
                              ResourceArn=resource_arn,
                              Tags={
                                  'Retention': f'{retention_days}days',
                                  'DeleteOn': delete_on
                              }
                          )

              return {
                  'statusCode': 200,
                  'body': json.dumps('Tagging complete')
              }

      Environment:
        Variables:
          RETENTION_DAYS: !Ref RetentionDays

  SnapshotEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: SnapshotCreationEventRule
      EventPattern:
        source:
          - "aws.ec2"
          - "aws.rds"
          - "aws.fsx"
          - "aws.backup"
        detail-type:
          - "AWS API Call via CloudTrail"
        detail:
          eventName:
            - "CreateSnapshot"
            - "StartBackupJob"
      Targets:
        - Arn: !GetAtt SnapshotTaggerLambda.Arn
          Id: SnapshotTaggerLambdaTarget

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref SnapshotTaggerLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt SnapshotEventRule.Arn
