AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for EC2 status check monitoring and notification'

Parameters:
  EmailAddress:
    Type: String
    Description: Email address to receive EC2 status check notifications
    
  ScheduleExpression:
    Type: String
    Default: 'rate(1 hour)'
    Description: How often the EC2 status check runs (e.g., rate(1 hour), cron(0 12 * * ? *))

  RegionsToCheck:
    Type: String
    Default: ''
    Description: Comma-separated list of regions to check (leave empty to check all regions)

Resources:
  # SNS Topic for notifications
  EC2StatusCheckTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: EC2 Status Check Notifications

  # SNS Subscription for email notifications
  EC2StatusCheckSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: email
      TopicArn: !Ref EC2StatusCheckTopic
      Endpoint: !Ref EmailAddress

  # IAM Role for Lambda function
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: EC2StatusCheckPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:DescribeInstanceStatus'
                  - 'ec2:DescribeInstances'
                  - 'ec2:DescribeRegions'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'sns:Publish'
                Resource: !Ref EC2StatusCheckTopic

  # Lambda Function
  EC2StatusCheckFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.9
      Timeout: 300
      MemorySize: 256
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref EC2StatusCheckTopic
          REGIONS: !Ref RegionsToCheck
      Code:
        ZipFile: |
          import boto3
          import datetime
          import os

          def lambda_handler(event, context):
              # Get regions or use specific regions from environment variables
              regions = os.environ.get('REGIONS', '').split(',')
              if not regions or regions[0] == '':
                  ec2_client = boto3.client('ec2')
                  regions = [region['RegionName'] for region in ec2_client.describe_regions()['Regions']]
              
              # Store instances with issues
              instances_with_issues = []
              total_instances = 0
              
              for region in regions:
                  print(f"Checking region: {region}")
                  
                  # Create EC2 client for this region
                  ec2 = boto3.client('ec2', region_name=region)
                  
                  # Get all EC2 instances with status
                  instance_statuses = ec2.describe_instance_status(IncludeAllInstances=True)
                  
                  # Get instance details
                  instances_response = ec2.describe_instances()
                  
                  # Create a mapping of instance IDs to names
                  instance_names = {}
                  for reservation in instances_response['Reservations']:
                      for instance in reservation['Instances']:
                          instance_id = instance['InstanceId']
                          instance_type = instance['InstanceType']
                          instance_state = instance['State']['Name']
                          
                          # Get instance name from tags
                          instance_name = 'No Name'
                          if 'Tags' in instance:
                              for tag in instance['Tags']:
                                  if tag['Key'] == 'Name':
                                      instance_name = tag['Value']
                          
                          instance_names[instance_id] = {
                              'Name': instance_name,
                              'Type': instance_type,
                              'State': instance_state
                          }
                  
                  # Process instance statuses
                  for status in instance_statuses['InstanceStatuses']:
                      instance_id = status['InstanceId']
                      system_status = status['SystemStatus']['Status']
                      instance_status = status['InstanceStatus']['Status']
                      
                      total_instances += 1
                      
                      # Check for issues
                      if system_status != 'ok' or instance_status != 'ok':
                          instance_info = instance_names.get(instance_id, {'Name': 'Unknown', 'Type': 'Unknown', 'State': 'Unknown'})
                          instances_with_issues.append({
                              'InstanceId': instance_id,
                              'Name': instance_info['Name'],
                              'Type': instance_info['Type'],
                              'State': instance_info['State'],
                              'SystemStatus': system_status,
                              'InstanceStatus': instance_status,
                              'Region': region
                          })
              
              # If there are instances with issues, send notification
              if instances_with_issues:
                  send_notification(instances_with_issues, total_instances)
                  
              print(f"EC2 status check completed. Total instances: {total_instances}, Issues: {len(instances_with_issues)}")
              return {
                  'instancesChecked': total_instances,
                  'instancesWithIssues': len(instances_with_issues)
              }

          def send_notification(instances_with_issues, total_instances):
              sns = boto3.client('sns')
              topic_arn = os.environ['SNS_TOPIC_ARN']
              
              # Format message
              message = f"EC2 Status Check Alert - {len(instances_with_issues)} instance(s) with issues detected\n\n"
              message += f"Total instances checked: {total_instances}\n\n"
              message += "Instances with issues:\n"
              
              for instance in instances_with_issues:
                  message += f"\nInstance ID: {instance['InstanceId']}\n"
                  message += f"Name: {instance['Name']}\n"
                  message += f"Type: {instance['Type']}\n"
                  message += f"State: {instance['State']}\n"
                  message += f"System Status: {instance['SystemStatus']}\n"
                  message += f"Instance Status: {instance['InstanceStatus']}\n"
                  message += f"Region: {instance['Region']}\n"
                  
                  # Determine health check ratio (3-part check)
                  health_checks_passing = 0
                  if instance['SystemStatus'] == 'ok':
                      health_checks_passing += 1
                  if instance['InstanceStatus'] == 'ok':
                      health_checks_passing += 1
                  if instance['State'] == 'running':
                      health_checks_passing += 1
                      
                  message += f"Health Check Ratio: {health_checks_passing}/3\n"
              
              # Send SNS notification
              sns.publish(
                  TopicArn=topic_arn,
                  Subject="EC2 Instance Status Check Alert",
                  Message=message
              )

  # CloudWatch Event Rule to trigger Lambda on schedule
  EC2StatusCheckSchedule:
    Type: AWS::Events::Rule
    Properties:
      Description: Schedule for EC2 status check Lambda function
      ScheduleExpression: !Ref ScheduleExpression
      State: ENABLED
      Targets:
        - Arn: !GetAtt EC2StatusCheckFunction.Arn
          Id: EC2StatusCheckTarget

  # Permission for CloudWatch Events to invoke Lambda
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref EC2StatusCheckFunction
      Action: 'lambda:InvokeFunction'
      Principal: 'events.amazonaws.com'
      SourceArn: !GetAtt EC2StatusCheckSchedule.Arn

Outputs:
  LambdaFunctionName:
    Description: Name of the Lambda function
    Value: !Ref EC2StatusCheckFunction

  SNSTopicARN:
    Description: ARN of the SNS topic
    Value: !Ref EC2StatusCheckTopic
